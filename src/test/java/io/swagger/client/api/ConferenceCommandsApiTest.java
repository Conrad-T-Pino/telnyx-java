/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ConferenceCommandResponse;
import io.swagger.client.model.ConferenceHoldRequest;
import io.swagger.client.model.ConferenceMuteRequest;
import io.swagger.client.model.ConferenceUnholdRequest;
import io.swagger.client.model.ConferenceUnmuteRequest;
import io.swagger.client.model.CreateConferenceRequest;
import io.swagger.client.model.CreateConferenceResponse;
import io.swagger.client.model.GetConferenceResponse;
import io.swagger.client.model.JoinConferenceRequest;
import io.swagger.client.model.ListConferenceResponse;
import io.swagger.client.model.ListParticipantsResponse;
import io.swagger.client.model.StartRecordingRequest;
import io.swagger.client.model.StopRecordingRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConferenceCommandsApi
 */
@Ignore
public class ConferenceCommandsApiTest {

    private final ConferenceCommandsApi api = new ConferenceCommandsApi();

    /**
     * Conference recording start
     *
     * Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callControlRecordConferenceStartTest() throws ApiException {
        StartRecordingRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.callControlRecordConferenceStart(body, id);

        // TODO: test validations
    }
    /**
     * Conference recording stop
     *
     * Stop recording the conference.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callControlRecordConferenceStopTest() throws ApiException {
        StopRecordingRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.callControlRecordConferenceStop(body, id);

        // TODO: test validations
    }
    /**
     * Create conference
     *
     * Create a conference from an existing call leg using a &#x60;call_control_id&#x60; and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - &#x60;conference.created&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; - &#x60;conference.ended&#x60; - &#x60;conference.recording.saved&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConferenceTest() throws ApiException {
        CreateConferenceRequest body = null;
        CreateConferenceResponse response = api.createConference(body);

        // TODO: test validations
    }
    /**
     * Retrieve a conference
     *
     * Retrieve an existing conference
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferenceTest() throws ApiException {
        String id = null;
        GetConferenceResponse response = api.getConference(id);

        // TODO: test validations
    }
    /**
     * List conference participants
     *
     * Lists conference participants
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferenceParticipantsTest() throws ApiException {
        String id = null;
        Boolean filterMuted = null;
        Boolean filterOnHold = null;
        Boolean filterWhispering = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        ListParticipantsResponse response = api.getConferenceParticipants(id, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize);

        // TODO: test validations
    }
    /**
     * List conferences
     *
     * Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by &#x60;expires_at&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferencesTest() throws ApiException {
        String filterName = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        ListConferenceResponse response = api.getConferences(filterName, pageNumber, pageSize);

        // TODO: test validations
    }
    /**
     * Hold conference participants
     *
     * Hold a list of participants in a conference call
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holdConferenceTest() throws ApiException {
        ConferenceHoldRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.holdConference(body, id);

        // TODO: test validations
    }
    /**
     * Join a conference
     *
     * Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the &#x60;call_control_id&#x60; of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void joinConferenceTest() throws ApiException {
        JoinConferenceRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.joinConference(body, id);

        // TODO: test validations
    }
    /**
     * Mute conference participants
     *
     * Mute a list of participants in a conference call
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteConferenceTest() throws ApiException {
        ConferenceMuteRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.muteConference(body, id);

        // TODO: test validations
    }
    /**
     * Unhold conference participants
     *
     * Unhold a list of participants in a conference call
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unholdConferenceTest() throws ApiException {
        ConferenceUnholdRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.unholdConference(body, id);

        // TODO: test validations
    }
    /**
     * Unmute conference participants
     *
     * Unmute a list of participants in a conference call
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmuteConferenceTest() throws ApiException {
        ConferenceUnmuteRequest body = null;
        String id = null;
        ConferenceCommandResponse response = api.unmuteConference(body, id);

        // TODO: test validations
    }
}
