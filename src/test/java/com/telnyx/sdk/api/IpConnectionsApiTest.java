/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.JSON;
import com.telnyx.sdk.auth.HttpBearerAuth;
import com.telnyx.sdk.model.AnchorsiteOverride;
import com.telnyx.sdk.model.ConnectionRtcpSettings;
import com.telnyx.sdk.model.CreateInboundIpRequest;
import com.telnyx.sdk.model.CreateIpConnectionRequest;
import com.telnyx.sdk.model.DtmfType;
import com.telnyx.sdk.model.EncryptedMedia;
import com.telnyx.sdk.model.IpConnectionResponse;
import com.telnyx.sdk.model.OutboundIp;
import org.junit.Before;
import org.junit.Test;

import java.util.Collections;

/**
 * API tests for IpConnectionsApi
 */
public class IpConnectionsApiTest {

    private final IpConnectionsApi api = new IpConnectionsApi();
    private ObjectMapper mapper;

    @Before
    public void setup() {
        ApiClient defaultClient = Configuration.getDefaultApiClient();
        defaultClient.setBasePath(TestConfiguration.MOCK_SERVER_URL);

        HttpBearerAuth bearerAuth = (HttpBearerAuth) defaultClient.getAuthentication("bearerAuth");
        bearerAuth.setBearerToken(TestConfiguration.API_KEY);

        mapper = new JSON().getMapper();
    }

    /**
     * Create an Ip connection
     * <p>
     * Creates an IP connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIpConnection_whenDefaultRequest_returnsIpConnection() throws ApiException {
        CreateIpConnectionRequest createIpConnectionRequest = new CreateIpConnectionRequest()
                .active(true)
                .anchorsiteOverride(AnchorsiteOverride.CHICAGO_IL)
                .connectionName("some_connection")
                .defaultOnHoldComfortNoiseEnabled(true)
                .dtmfType(DtmfType.RFC_2833)
                .encodeContactHeaderEnabled(false)
                .encryptedMedia(EncryptedMedia.SRTP)
                .inbound(new CreateInboundIpRequest()
                        .aniNumberFormat(CreateInboundIpRequest.AniNumberFormatEnum._E_164)
                        .channelLimit(10)
                        .codecs(Collections.singletonList("G722"))
                        .defaultRoutingMethod(CreateInboundIpRequest.DefaultRoutingMethodEnum.SEQUENTIAL)
                        .dnisNumberFormat(CreateInboundIpRequest.DnisNumberFormatEnum._E164)
                        .generateRingbackTone(true)
                        .isupHeadersEnabled(true)
                        .prackEnabled(true)
                        .privacyZoneEnabled(true)
                        .sipCompactHeadersEnabled(true)
                        .sipRegion(CreateInboundIpRequest.SipRegionEnum.US)
                        .sipSubdomain("test")
                        .sipSubdomainReceiveSettings(CreateInboundIpRequest.SipSubdomainReceiveSettingsEnum.ONLY_MY_CONNECTIONS)
                        .timeout1xxSecs(10)
                        .timeout2xxSecs(20)
                )
                .onnetT38PassthroughEnabled(false)
                .outbound(new OutboundIp()
                        .aniOverride("test")
                        .aniOverrideType(OutboundIp.AniOverrideTypeEnum.ALWAYS)
                        .callParkingEnabled(true)
                        .channelLimit(10)
                        .generateRingbackTone(true)
                        .instantRingbackEnabled(true)
                        .ipAuthenticationMethod(OutboundIp.IpAuthenticationMethodEnum.TOKEN)
                        .ipAuthenticationToken("test")
                        .localization("test")
                        .outboundVoiceProfileId("123")
                        .t38ReinviteSource(OutboundIp.T38ReinviteSourceEnum.TELNYX)
                        .techPrefix("test")
                )
                .rtcpSettings(new ConnectionRtcpSettings()
                        .captureEnabled(true)
                        .port(ConnectionRtcpSettings.PortEnum.RTCP_MUX)
                        .reportFrequencySecs(10)
                )
                .transportProtocol(CreateIpConnectionRequest.TransportProtocolEnum.UDP);
        //TODO: missed webhook_event_failover_url
        //TODO: missed webhook_event_url
        //TODO: missed webhook_timeout_secs

        IpConnectionResponse response = api.createIpConnection(createIpConnectionRequest);
        // TODO: test validations
    }

    /**
     * Delete an Ip connection
     * <p>
     * Deletes an existing IP connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIpConnectionTest() throws ApiException {
        //String id = null;
        //IpConnectionResponse response = api.deleteIpConnection(id);
        // TODO: test validations
    }

    /**
     * List Ip connections
     * <p>
     * Returns a list of your IP connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIpConnectionsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterConnectionNameContains = null;
        //String filterOutboundOutboundVoiceProfileId = null;
        //String sort = null;
        //ListIpConnectionsResponse response = api.listIpConnections(pageNumber, pageSize, filterConnectionNameContains, filterOutboundOutboundVoiceProfileId, sort);
        // TODO: test validations
    }

    /**
     * Retrieve an Ip connection
     * <p>
     * Retrieves the details of an existing ip connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveIpConnectionTest() throws ApiException {
        //String id = null;
        //IpConnectionResponse response = api.retrieveIpConnection(id);
        // TODO: test validations
    }

    /**
     * Update an Ip connection
     * <p>
     * Updates settings of an existing IP connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIpConnectionTest() throws ApiException {
        //String id = null;
        //UpdateIpConnectionRequest updateIpConnectionRequest = null;
        //IpConnectionResponse response = api.updateIpConnection(id, updateIpConnectionRequest);
        // TODO: test validations
    }

}
