/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.io.Serializable;

/**
 * Number Pool allows you to send messages from a pool of numbers of different types, assigning weights to each type. The pool consists of all the long code and toll free numbers assigned to the messaging profile.  To disable this feature, set the object field to &#x60;null&#x60;. 
 */
@ApiModel(description = "Number Pool allows you to send messages from a pool of numbers of different types, assigning weights to each type. The pool consists of all the long code and toll free numbers assigned to the messaging profile.  To disable this feature, set the object field to `null`. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NumberPoolSettings {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TOLL_FREE_WEIGHT = "toll_free_weight";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE_WEIGHT)
  private BigDecimal tollFreeWeight;

  public static final String SERIALIZED_NAME_LONG_CODE_WEIGHT = "long_code_weight";
  @SerializedName(SERIALIZED_NAME_LONG_CODE_WEIGHT)
  private BigDecimal longCodeWeight;

  public static final String SERIALIZED_NAME_SKIP_UNHEALTHY = "skip_unhealthy";
  @SerializedName(SERIALIZED_NAME_SKIP_UNHEALTHY)
  private Boolean skipUnhealthy;

  public static final String SERIALIZED_NAME_STICKY_SENDER = "sticky_sender";
  @SerializedName(SERIALIZED_NAME_STICKY_SENDER)
  private Boolean stickySender = false;

  public static final String SERIALIZED_NAME_GEOMATCH = "geomatch";
  @SerializedName(SERIALIZED_NAME_GEOMATCH)
  private Boolean geomatch = false;


  public NumberPoolSettings tollFreeWeight(BigDecimal tollFreeWeight) {
    
    this.tollFreeWeight = tollFreeWeight;
    return this;
  }

   /**
   * Defines the probability weight for a Toll Free number to be selected when sending a message. The higher the weight the higher the probability. The sum of the weights for all number types does not necessarily need to add to 100. Weight must be a non-negative number, and when equal to zero it will remove the number type from the pool. 
   * @return tollFreeWeight
  **/
  @ApiModelProperty(example = "10", required = true, value = "Defines the probability weight for a Toll Free number to be selected when sending a message. The higher the weight the higher the probability. The sum of the weights for all number types does not necessarily need to add to 100. Weight must be a non-negative number, and when equal to zero it will remove the number type from the pool. ")

  public BigDecimal getTollFreeWeight() {
    return tollFreeWeight;
  }


  public void setTollFreeWeight(BigDecimal tollFreeWeight) {
    this.tollFreeWeight = tollFreeWeight;
  }


  public NumberPoolSettings longCodeWeight(BigDecimal longCodeWeight) {
    
    this.longCodeWeight = longCodeWeight;
    return this;
  }

   /**
   * Defines the probability weight for a Long Code number to be selected when sending a message. The higher the weight the higher the probability. The sum of the weights for all number types does not necessarily need to add to 100.  Weight must be a non-negative number, and when equal to zero it will remove the number type from the pool. 
   * @return longCodeWeight
  **/
  @ApiModelProperty(example = "1", required = true, value = "Defines the probability weight for a Long Code number to be selected when sending a message. The higher the weight the higher the probability. The sum of the weights for all number types does not necessarily need to add to 100.  Weight must be a non-negative number, and when equal to zero it will remove the number type from the pool. ")

  public BigDecimal getLongCodeWeight() {
    return longCodeWeight;
  }


  public void setLongCodeWeight(BigDecimal longCodeWeight) {
    this.longCodeWeight = longCodeWeight;
  }


  public NumberPoolSettings skipUnhealthy(Boolean skipUnhealthy) {
    
    this.skipUnhealthy = skipUnhealthy;
    return this;
  }

   /**
   * If set to true all unhealthy numbers will be automatically excluded from the pool. Health metrics per number are calculated on a regular basis, taking into account the deliverability rate and the amount of messages marked as spam by upstream carriers. Numbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy. 
   * @return skipUnhealthy
  **/
  @ApiModelProperty(example = "true", required = true, value = "If set to true all unhealthy numbers will be automatically excluded from the pool. Health metrics per number are calculated on a regular basis, taking into account the deliverability rate and the amount of messages marked as spam by upstream carriers. Numbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy. ")

  public Boolean getSkipUnhealthy() {
    return skipUnhealthy;
  }


  public void setSkipUnhealthy(Boolean skipUnhealthy) {
    this.skipUnhealthy = skipUnhealthy;
  }


  public NumberPoolSettings stickySender(Boolean stickySender) {
    
    this.stickySender = stickySender;
    return this;
  }

   /**
   * If set to true, Number Pool will try to choose the same sending number for all messages to a particular recipient. If the sending number becomes unhealthy and &#x60;skip_unhealthy&#x60; is set to true, a new number will be chosen. 
   * @return stickySender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true, Number Pool will try to choose the same sending number for all messages to a particular recipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a new number will be chosen. ")

  public Boolean getStickySender() {
    return stickySender;
  }


  public void setStickySender(Boolean stickySender) {
    this.stickySender = stickySender;
  }


  public NumberPoolSettings geomatch(Boolean geomatch) {
    
    this.geomatch = geomatch;
    return this;
  }

   /**
   * If set to true, Number Pool will try to choose a sending number with the same area code as the destination number. If there are no such numbers available, a nunber with a different area code will be chosen. Currently only NANP numbers are supported. 
   * @return geomatch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true, Number Pool will try to choose a sending number with the same area code as the destination number. If there are no such numbers available, a nunber with a different area code will be chosen. Currently only NANP numbers are supported. ")

  public Boolean getGeomatch() {
    return geomatch;
  }


  public void setGeomatch(Boolean geomatch) {
    this.geomatch = geomatch;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberPoolSettings numberPoolSettings = (NumberPoolSettings) o;
    return Objects.equals(this.tollFreeWeight, numberPoolSettings.tollFreeWeight) &&
        Objects.equals(this.longCodeWeight, numberPoolSettings.longCodeWeight) &&
        Objects.equals(this.skipUnhealthy, numberPoolSettings.skipUnhealthy) &&
        Objects.equals(this.stickySender, numberPoolSettings.stickySender) &&
        Objects.equals(this.geomatch, numberPoolSettings.geomatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tollFreeWeight, longCodeWeight, skipUnhealthy, stickySender, geomatch);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberPoolSettings {\n");
    sb.append("    tollFreeWeight: ").append(toIndentedString(tollFreeWeight)).append("\n");
    sb.append("    longCodeWeight: ").append(toIndentedString(longCodeWeight)).append("\n");
    sb.append("    skipUnhealthy: ").append(toIndentedString(skipUnhealthy)).append("\n");
    sb.append("    stickySender: ").append(toIndentedString(stickySender)).append("\n");
    sb.append("    geomatch: ").append(toIndentedString(geomatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

