/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * BaseMessageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BaseMessageRequest {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MEDIA_URLS = "media_urls";
  @SerializedName(SERIALIZED_NAME_MEDIA_URLS)
  private List<String> mediaUrls = null;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public static final String SERIALIZED_NAME_WEBHOOK_FAILOVER_URL = "webhook_failover_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_FAILOVER_URL)
  private String webhookFailoverUrl;

  public static final String SERIALIZED_NAME_USE_PROFILE_WEBHOOKS = "use_profile_webhooks";
  @SerializedName(SERIALIZED_NAME_USE_PROFILE_WEBHOOKS)
  private Boolean useProfileWebhooks = true;

  /**
   * The protocol for sending the message, either SMS or MMS.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SMS("SMS"),
    
    MMS("MMS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_AUTO_DETECT = "auto_detect";
  @SerializedName(SERIALIZED_NAME_AUTO_DETECT)
  private Boolean autoDetect = false;


  public BaseMessageRequest text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Message body (i.e., content) as a non-empty string.  **Required for SMS**
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message body (i.e., content) as a non-empty string.  **Required for SMS**")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public BaseMessageRequest subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject of multimedia message
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subject of multimedia message")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public BaseMessageRequest mediaUrls(List<String> mediaUrls) {
    
    this.mediaUrls = mediaUrls;
    return this;
  }

  public BaseMessageRequest addMediaUrlsItem(String mediaUrlsItem) {
    if (this.mediaUrls == null) {
      this.mediaUrls = new ArrayList<>();
    }
    this.mediaUrls.add(mediaUrlsItem);
    return this;
  }

   /**
   * A list of media URLs. The total media size must be less than 1 MB.  **Required for MMS**
   * @return mediaUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of media URLs. The total media size must be less than 1 MB.  **Required for MMS**")

  public List<String> getMediaUrls() {
    return mediaUrls;
  }


  public void setMediaUrls(List<String> mediaUrls) {
    this.mediaUrls = mediaUrls;
  }


  public BaseMessageRequest webhookUrl(String webhookUrl) {
    
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The URL where webhooks related to this message will be sent.
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL where webhooks related to this message will be sent.")

  public String getWebhookUrl() {
    return webhookUrl;
  }


  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public BaseMessageRequest webhookFailoverUrl(String webhookFailoverUrl) {
    
    this.webhookFailoverUrl = webhookFailoverUrl;
    return this;
  }

   /**
   * The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.
   * @return webhookFailoverUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.")

  public String getWebhookFailoverUrl() {
    return webhookFailoverUrl;
  }


  public void setWebhookFailoverUrl(String webhookFailoverUrl) {
    this.webhookFailoverUrl = webhookFailoverUrl;
  }


  public BaseMessageRequest useProfileWebhooks(Boolean useProfileWebhooks) {
    
    this.useProfileWebhooks = useProfileWebhooks;
    return this;
  }

   /**
   * If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.
   * @return useProfileWebhooks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.")

  public Boolean getUseProfileWebhooks() {
    return useProfileWebhooks;
  }


  public void setUseProfileWebhooks(Boolean useProfileWebhooks) {
    this.useProfileWebhooks = useProfileWebhooks;
  }


  public BaseMessageRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The protocol for sending the message, either SMS or MMS.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The protocol for sending the message, either SMS or MMS.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BaseMessageRequest autoDetect(Boolean autoDetect) {
    
    this.autoDetect = autoDetect;
    return this;
  }

   /**
   * Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.
   * @return autoDetect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.")

  public Boolean getAutoDetect() {
    return autoDetect;
  }


  public void setAutoDetect(Boolean autoDetect) {
    this.autoDetect = autoDetect;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseMessageRequest baseMessageRequest = (BaseMessageRequest) o;
    return Objects.equals(this.text, baseMessageRequest.text) &&
        Objects.equals(this.subject, baseMessageRequest.subject) &&
        Objects.equals(this.mediaUrls, baseMessageRequest.mediaUrls) &&
        Objects.equals(this.webhookUrl, baseMessageRequest.webhookUrl) &&
        Objects.equals(this.webhookFailoverUrl, baseMessageRequest.webhookFailoverUrl) &&
        Objects.equals(this.useProfileWebhooks, baseMessageRequest.useProfileWebhooks) &&
        Objects.equals(this.type, baseMessageRequest.type) &&
        Objects.equals(this.autoDetect, baseMessageRequest.autoDetect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, subject, mediaUrls, webhookUrl, webhookFailoverUrl, useProfileWebhooks, type, autoDetect);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseMessageRequest {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    mediaUrls: ").append(toIndentedString(mediaUrls)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    webhookFailoverUrl: ").append(toIndentedString(webhookFailoverUrl)).append("\n");
    sb.append("    useProfileWebhooks: ").append(toIndentedString(useProfileWebhooks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    autoDetect: ").append(toIndentedString(autoDetect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

