/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * ConferenceSpeakRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConferenceSpeakRequest {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CALL_CONTROL_IDS = "call_control_ids";
  @SerializedName(SERIALIZED_NAME_CALL_CONTROL_IDS)
  private List<String> callControlIds = null;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  /**
   * The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).
   */
  @JsonAdapter(PayloadTypeEnum.Adapter.class)
  public enum PayloadTypeEnum {
    TEXT("text"),
    
    SSML("ssml");

    private String value;

    PayloadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayloadTypeEnum fromValue(String value) {
      for (PayloadTypeEnum b : PayloadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayloadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayloadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayloadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayloadTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYLOAD_TYPE = "payload_type";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_TYPE)
  private PayloadTypeEnum payloadType = PayloadTypeEnum.TEXT;

  /**
   * The gender of the voice used to speak the text.
   */
  @JsonAdapter(VoiceEnum.Adapter.class)
  public enum VoiceEnum {
    MALE("male"),
    
    FEMALE("female");

    private String value;

    VoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceEnum fromValue(String value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoiceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private VoiceEnum voice;

  /**
   * The language used to speak the text.
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    ARB("arb"),
    
    CMN_CN("cmn-CN"),
    
    CY_GB("cy-GB"),
    
    DA_DK("da-DK"),
    
    DE_DE("de-DE"),
    
    EN_AU("en-AU"),
    
    EN_GB("en-GB"),
    
    EN_GB_WLS("en-GB-WLS"),
    
    EN_IN("en-IN"),
    
    EN_US("en-US"),
    
    ES_ES("es-ES"),
    
    ES_MX("es-MX"),
    
    ES_US("es-US"),
    
    FR_CA("fr-CA"),
    
    FR_FR("fr-FR"),
    
    HI_IN("hi-IN"),
    
    IS_IS("is-IS"),
    
    IT_IT("it-IT"),
    
    JA_JP("ja-JP"),
    
    KO_KR("ko-KR"),
    
    NB_NO("nb-NO"),
    
    NL_NL("nl-NL"),
    
    PL_PL("pl-PL"),
    
    PT_BR("pt-BR"),
    
    PT_PT("pt-PT"),
    
    RO_RO("ro-RO"),
    
    RU_RU("ru-RU"),
    
    SV_SE("sv-SE"),
    
    TR_TR("tr-TR");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_COMMAND_ID = "command_id";
  @SerializedName(SERIALIZED_NAME_COMMAND_ID)
  private String commandId;


  public ConferenceSpeakRequest callControlIds(List<String> callControlIds) {
    
    this.callControlIds = callControlIds;
    return this;
  }

  public ConferenceSpeakRequest addCallControlIdsItem(String callControlIdsItem) {
    if (this.callControlIds == null) {
      this.callControlIds = new ArrayList<>();
    }
    this.callControlIds.add(callControlIdsItem);
    return this;
  }

   /**
   * Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text.
   * @return callControlIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text.")

  public List<String> getCallControlIds() {
    return callControlIds;
  }


  public void setCallControlIds(List<String> callControlIds) {
    this.callControlIds = callControlIds;
  }


  public ConferenceSpeakRequest payload(String payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * The text or SSML to be converted into speech. There is a 5,000 character limit.
   * @return payload
  **/
  @ApiModelProperty(example = "Say this to participants", required = true, value = "The text or SSML to be converted into speech. There is a 5,000 character limit.")

  public String getPayload() {
    return payload;
  }


  public void setPayload(String payload) {
    this.payload = payload;
  }


  public ConferenceSpeakRequest payloadType(PayloadTypeEnum payloadType) {
    
    this.payloadType = payloadType;
    return this;
  }

   /**
   * The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).
   * @return payloadType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ssml", value = "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).")

  public PayloadTypeEnum getPayloadType() {
    return payloadType;
  }


  public void setPayloadType(PayloadTypeEnum payloadType) {
    this.payloadType = payloadType;
  }


  public ConferenceSpeakRequest voice(VoiceEnum voice) {
    
    this.voice = voice;
    return this;
  }

   /**
   * The gender of the voice used to speak the text.
   * @return voice
  **/
  @ApiModelProperty(example = "female", required = true, value = "The gender of the voice used to speak the text.")

  public VoiceEnum getVoice() {
    return voice;
  }


  public void setVoice(VoiceEnum voice) {
    this.voice = voice;
  }


  public ConferenceSpeakRequest language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

   /**
   * The language used to speak the text.
   * @return language
  **/
  @ApiModelProperty(example = "en-US", required = true, value = "The language used to speak the text.")

  public LanguageEnum getLanguage() {
    return language;
  }


  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public ConferenceSpeakRequest commandId(String commandId) {
    
    this.commandId = commandId;
    return this;
  }

   /**
   * Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same &#x60;command_id&#x60; as one that has already been executed.
   * @return commandId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "891510ac-f3e4-11e8-af5b-de00688a4901", value = "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.")

  public String getCommandId() {
    return commandId;
  }


  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConferenceSpeakRequest conferenceSpeakRequest = (ConferenceSpeakRequest) o;
    return Objects.equals(this.callControlIds, conferenceSpeakRequest.callControlIds) &&
        Objects.equals(this.payload, conferenceSpeakRequest.payload) &&
        Objects.equals(this.payloadType, conferenceSpeakRequest.payloadType) &&
        Objects.equals(this.voice, conferenceSpeakRequest.voice) &&
        Objects.equals(this.language, conferenceSpeakRequest.language) &&
        Objects.equals(this.commandId, conferenceSpeakRequest.commandId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callControlIds, payload, payloadType, voice, language, commandId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConferenceSpeakRequest {\n");
    sb.append("    callControlIds: ").append(toIndentedString(callControlIds)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    payloadType: ").append(toIndentedString(payloadType)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

