/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telnyx.sdk.models.Error;
import com.telnyx.sdk.models.InboundMessagePayloadCost;
import com.telnyx.sdk.models.OutboundMessagePayloadFrom;
import com.telnyx.sdk.models.OutboundMessagePayloadMedia;
import com.telnyx.sdk.models.OutboundMessagePayloadTo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.io.Serializable;

/**
 * OutboundMessagePayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OutboundMessagePayload {
  private static final long serialVersionUID = 1L;

  /**
   * Identifies the type of the resource.
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    MESSAGE("message");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordTypeEnum fromValue(String value) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECORD_TYPE = "record_type";
  @SerializedName(SERIALIZED_NAME_RECORD_TYPE)
  private RecordTypeEnum recordType;

  /**
   * The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    OUTBOUND("outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The type of message.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SMS("SMS"),
    
    MMS("MMS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_MESSAGING_PROFILE_ID = "messaging_profile_id";
  @SerializedName(SERIALIZED_NAME_MESSAGING_PROFILE_ID)
  private String messagingProfileId;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OutboundMessagePayloadFrom from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<OutboundMessagePayloadTo> to = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<OutboundMessagePayloadMedia> media = null;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public static final String SERIALIZED_NAME_WEBHOOK_FAILOVER_URL = "webhook_failover_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_FAILOVER_URL)
  private String webhookFailoverUrl;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private Integer parts;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private InboundMessagePayloadCost cost;

  public static final String SERIALIZED_NAME_RECEIVED_AT = "received_at";
  @SerializedName(SERIALIZED_NAME_RECEIVED_AT)
  private OffsetDateTime receivedAt;

  public static final String SERIALIZED_NAME_SENT_AT = "sent_at";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private OffsetDateTime sentAt;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "valid_until";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private OffsetDateTime validUntil;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = null;


  public OutboundMessagePayload recordType(RecordTypeEnum recordType) {
    
    this.recordType = recordType;
    return this;
  }

   /**
   * Identifies the type of the resource.
   * @return recordType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "message", value = "Identifies the type of the resource.")

  public RecordTypeEnum getRecordType() {
    return recordType;
  }


  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }


  public OutboundMessagePayload direction(DirectionEnum direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "outbound", value = "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.")

  public DirectionEnum getDirection() {
    return direction;
  }


  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public OutboundMessagePayload id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifies the type of resource.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the type of resource.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public OutboundMessagePayload type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of message.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of message.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public OutboundMessagePayload messagingProfileId(String messagingProfileId) {
    
    this.messagingProfileId = messagingProfileId;
    return this;
  }

   /**
   * Unique identifier for a messaging profile.
   * @return messagingProfileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for a messaging profile.")

  public String getMessagingProfileId() {
    return messagingProfileId;
  }


  public void setMessagingProfileId(String messagingProfileId) {
    this.messagingProfileId = messagingProfileId;
  }


  public OutboundMessagePayload from(OutboundMessagePayloadFrom from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OutboundMessagePayloadFrom getFrom() {
    return from;
  }


  public void setFrom(OutboundMessagePayloadFrom from) {
    this.from = from;
  }


  public OutboundMessagePayload to(List<OutboundMessagePayloadTo> to) {
    
    this.to = to;
    return this;
  }

  public OutboundMessagePayload addToItem(OutboundMessagePayloadTo toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OutboundMessagePayloadTo> getTo() {
    return to;
  }


  public void setTo(List<OutboundMessagePayloadTo> to) {
    this.to = to;
  }


  public OutboundMessagePayload text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Message body (i.e., content) as a non-empty string.  **Required for SMS**
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message body (i.e., content) as a non-empty string.  **Required for SMS**")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public OutboundMessagePayload subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject of multimedia message
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subject of multimedia message")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public OutboundMessagePayload media(List<OutboundMessagePayloadMedia> media) {
    
    this.media = media;
    return this;
  }

  public OutboundMessagePayload addMediaItem(OutboundMessagePayloadMedia mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

   /**
   * Get media
   * @return media
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OutboundMessagePayloadMedia> getMedia() {
    return media;
  }


  public void setMedia(List<OutboundMessagePayloadMedia> media) {
    this.media = media;
  }


  public OutboundMessagePayload webhookUrl(String webhookUrl) {
    
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The URL where webhooks related to this message will be sent.
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL where webhooks related to this message will be sent.")

  public String getWebhookUrl() {
    return webhookUrl;
  }


  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public OutboundMessagePayload webhookFailoverUrl(String webhookFailoverUrl) {
    
    this.webhookFailoverUrl = webhookFailoverUrl;
    return this;
  }

   /**
   * The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.
   * @return webhookFailoverUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.")

  public String getWebhookFailoverUrl() {
    return webhookFailoverUrl;
  }


  public void setWebhookFailoverUrl(String webhookFailoverUrl) {
    this.webhookFailoverUrl = webhookFailoverUrl;
  }


  public OutboundMessagePayload encoding(String encoding) {
    
    this.encoding = encoding;
    return this;
  }

   /**
   * Encoding scheme used for the message body.
   * @return encoding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Encoding scheme used for the message body.")

  public String getEncoding() {
    return encoding;
  }


  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public OutboundMessagePayload parts(Integer parts) {
    
    this.parts = parts;
    return this;
  }

   /**
   * Number of parts into which the message&#39;s body must be split.
   * minimum: 1
   * maximum: 10
   * @return parts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of parts into which the message's body must be split.")

  public Integer getParts() {
    return parts;
  }


  public void setParts(Integer parts) {
    this.parts = parts;
  }


  public OutboundMessagePayload tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public OutboundMessagePayload addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags associated with the resource.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags associated with the resource.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public OutboundMessagePayload cost(InboundMessagePayloadCost cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InboundMessagePayloadCost getCost() {
    return cost;
  }


  public void setCost(InboundMessagePayloadCost cost) {
    this.cost = cost;
  }


  public OutboundMessagePayload receivedAt(OffsetDateTime receivedAt) {
    
    this.receivedAt = receivedAt;
    return this;
  }

   /**
   * ISO 8601 formatted date indicating when the message request was received.
   * @return receivedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 formatted date indicating when the message request was received.")

  public OffsetDateTime getReceivedAt() {
    return receivedAt;
  }


  public void setReceivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
  }


  public OutboundMessagePayload sentAt(OffsetDateTime sentAt) {
    
    this.sentAt = sentAt;
    return this;
  }

   /**
   * ISO 8601 formatted date indicating when the message was sent.
   * @return sentAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 formatted date indicating when the message was sent.")

  public OffsetDateTime getSentAt() {
    return sentAt;
  }


  public void setSentAt(OffsetDateTime sentAt) {
    this.sentAt = sentAt;
  }


  public OutboundMessagePayload completedAt(OffsetDateTime completedAt) {
    
    this.completedAt = completedAt;
    return this;
  }

   /**
   * ISO 8601 formatted date indicating when the message was finalized.
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 formatted date indicating when the message was finalized.")

  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }


  public void setCompletedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }


  public OutboundMessagePayload validUntil(OffsetDateTime validUntil) {
    
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Message must be out of the queue by this time or else it will be discarded and marked as &#39;sending_failed&#39;. Once the message moves out of the queue, this field will be nulled
   * @return validUntil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message must be out of the queue by this time or else it will be discarded and marked as 'sending_failed'. Once the message moves out of the queue, this field will be nulled")

  public OffsetDateTime getValidUntil() {
    return validUntil;
  }


  public void setValidUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
  }


  public OutboundMessagePayload errors(List<Error> errors) {
    
    this.errors = errors;
    return this;
  }

  public OutboundMessagePayload addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.
   * @return errors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.")

  public List<Error> getErrors() {
    return errors;
  }


  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutboundMessagePayload outboundMessagePayload = (OutboundMessagePayload) o;
    return Objects.equals(this.recordType, outboundMessagePayload.recordType) &&
        Objects.equals(this.direction, outboundMessagePayload.direction) &&
        Objects.equals(this.id, outboundMessagePayload.id) &&
        Objects.equals(this.type, outboundMessagePayload.type) &&
        Objects.equals(this.messagingProfileId, outboundMessagePayload.messagingProfileId) &&
        Objects.equals(this.from, outboundMessagePayload.from) &&
        Objects.equals(this.to, outboundMessagePayload.to) &&
        Objects.equals(this.text, outboundMessagePayload.text) &&
        Objects.equals(this.subject, outboundMessagePayload.subject) &&
        Objects.equals(this.media, outboundMessagePayload.media) &&
        Objects.equals(this.webhookUrl, outboundMessagePayload.webhookUrl) &&
        Objects.equals(this.webhookFailoverUrl, outboundMessagePayload.webhookFailoverUrl) &&
        Objects.equals(this.encoding, outboundMessagePayload.encoding) &&
        Objects.equals(this.parts, outboundMessagePayload.parts) &&
        Objects.equals(this.tags, outboundMessagePayload.tags) &&
        Objects.equals(this.cost, outboundMessagePayload.cost) &&
        Objects.equals(this.receivedAt, outboundMessagePayload.receivedAt) &&
        Objects.equals(this.sentAt, outboundMessagePayload.sentAt) &&
        Objects.equals(this.completedAt, outboundMessagePayload.completedAt) &&
        Objects.equals(this.validUntil, outboundMessagePayload.validUntil) &&
        Objects.equals(this.errors, outboundMessagePayload.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, direction, id, type, messagingProfileId, from, to, text, subject, media, webhookUrl, webhookFailoverUrl, encoding, parts, tags, cost, receivedAt, sentAt, completedAt, validUntil, errors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutboundMessagePayload {\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    messagingProfileId: ").append(toIndentedString(messagingProfileId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    webhookFailoverUrl: ").append(toIndentedString(webhookFailoverUrl)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

