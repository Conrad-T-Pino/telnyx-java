/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * RegulatoryRequirementCriteria
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RegulatoryRequirementCriteria {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_RECORD_TYPE = "record_type";
  @SerializedName(SERIALIZED_NAME_RECORD_TYPE)
  private String recordType;

  /**
   * Gets or Sets criteriaType
   */
  @JsonAdapter(CriteriaTypeEnum.Adapter.class)
  public enum CriteriaTypeEnum {
    COUNTRY("country"),
    
    PHONE_NUMBER_TYPE("phone_number_type");

    private String value;

    CriteriaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CriteriaTypeEnum fromValue(String value) {
      for (CriteriaTypeEnum b : CriteriaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CriteriaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CriteriaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CriteriaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CriteriaTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CRITERIA_TYPE = "criteria_type";
  @SerializedName(SERIALIZED_NAME_CRITERIA_TYPE)
  private CriteriaTypeEnum criteriaType;

  public static final String SERIALIZED_NAME_CRITERIA_VALUE = "criteria_value";
  @SerializedName(SERIALIZED_NAME_CRITERIA_VALUE)
  private String criteriaValue;


   /**
   * Get recordType
   * @return recordType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "phone_number_regulatory_requirement_criteria", value = "")

  public String getRecordType() {
    return recordType;
  }




   /**
   * Get criteriaType
   * @return criteriaType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CriteriaTypeEnum getCriteriaType() {
    return criteriaType;
  }




   /**
   * Get criteriaValue
   * @return criteriaValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AU", value = "")

  public String getCriteriaValue() {
    return criteriaValue;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegulatoryRequirementCriteria regulatoryRequirementCriteria = (RegulatoryRequirementCriteria) o;
    return Objects.equals(this.recordType, regulatoryRequirementCriteria.recordType) &&
        Objects.equals(this.criteriaType, regulatoryRequirementCriteria.criteriaType) &&
        Objects.equals(this.criteriaValue, regulatoryRequirementCriteria.criteriaValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, criteriaType, criteriaValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegulatoryRequirementCriteria {\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    criteriaType: ").append(toIndentedString(criteriaType)).append("\n");
    sb.append("    criteriaValue: ").append(toIndentedString(criteriaValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

