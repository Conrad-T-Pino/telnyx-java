/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.ConferenceCallRequest;
import com.telnyx.sdk.models.ConferenceCommandResponse;
import com.telnyx.sdk.models.ConferenceHoldRequest;
import com.telnyx.sdk.models.ConferenceMuteRequest;
import com.telnyx.sdk.models.ConferencePlayRequest;
import com.telnyx.sdk.models.ConferenceResponse;
import com.telnyx.sdk.models.ConferenceSpeakRequest;
import com.telnyx.sdk.models.ConferenceUnholdRequest;
import com.telnyx.sdk.models.ConferenceUnmuteRequest;
import com.telnyx.sdk.models.CreateConferenceRequest;
import com.telnyx.sdk.models.JoinConferenceRequest;
import com.telnyx.sdk.models.ListConferencesResponse;
import com.telnyx.sdk.models.ListParticipantsResponse;
import com.telnyx.sdk.models.StartRecordingRequest;
import com.telnyx.sdk.models.StopRecordingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConferenceCommandsApi {
    private ApiClient localVarApiClient;

    public ConferenceCommandsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConferenceCommandsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for conferenceDialParticipantIn
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceCallRequest Dial Into Conference request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceDialParticipantInCall(String id, ConferenceCallRequest conferenceCallRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferenceCallRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/dial_participant"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceDialParticipantInValidateBeforeCall(String id, ConferenceCallRequest conferenceCallRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceDialParticipantIn(Async)");
        }
        
        // verify the required parameter 'conferenceCallRequest' is set
        if (conferenceCallRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceCallRequest' when calling conferenceDialParticipantIn(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceDialParticipantInCall(id, conferenceCallRequest, _callback);
        return localVarCall;

    }

    /**
     * Dial a new participant into a conference
     * Dials a phone number and, when the call is answered, automatically joins them into the specified conference.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.answered&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceCallRequest Dial Into Conference request object (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceDialParticipantIn(String id, ConferenceCallRequest conferenceCallRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceDialParticipantInWithHttpInfo(id, conferenceCallRequest);
        return localVarResp.getData();
    }

    /**
     * Dial a new participant into a conference
     * Dials a phone number and, when the call is answered, automatically joins them into the specified conference.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.answered&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceCallRequest Dial Into Conference request object (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceDialParticipantInWithHttpInfo(String id, ConferenceCallRequest conferenceCallRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceDialParticipantInValidateBeforeCall(id, conferenceCallRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dial a new participant into a conference (asynchronously)
     * Dials a phone number and, when the call is answered, automatically joins them into the specified conference.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.answered&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceCallRequest Dial Into Conference request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceDialParticipantInAsync(String id, ConferenceCallRequest conferenceCallRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceDialParticipantInValidateBeforeCall(id, conferenceCallRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceHoldParticipants
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceHoldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceHoldParticipantsCall(String id, ConferenceHoldRequest conferenceHoldRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferenceHoldRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/hold"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceHoldParticipantsValidateBeforeCall(String id, ConferenceHoldRequest conferenceHoldRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceHoldParticipants(Async)");
        }
        
        // verify the required parameter 'conferenceHoldRequest' is set
        if (conferenceHoldRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceHoldRequest' when calling conferenceHoldParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceHoldParticipantsCall(id, conferenceHoldRequest, _callback);
        return localVarCall;

    }

    /**
     * Hold conference participants
     * Hold a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceHoldRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceHoldParticipants(String id, ConferenceHoldRequest conferenceHoldRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceHoldParticipantsWithHttpInfo(id, conferenceHoldRequest);
        return localVarResp.getData();
    }

    /**
     * Hold conference participants
     * Hold a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceHoldRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceHoldParticipantsWithHttpInfo(String id, ConferenceHoldRequest conferenceHoldRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceHoldParticipantsValidateBeforeCall(id, conferenceHoldRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hold conference participants (asynchronously)
     * Hold a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceHoldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceHoldParticipantsAsync(String id, ConferenceHoldRequest conferenceHoldRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceHoldParticipantsValidateBeforeCall(id, conferenceHoldRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceJoin
     * @param id Uniquely identifies the conference by id or name (required)
     * @param joinConferenceRequest Join Conference request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceJoinCall(String id, JoinConferenceRequest joinConferenceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = joinConferenceRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/join"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceJoinValidateBeforeCall(String id, JoinConferenceRequest joinConferenceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceJoin(Async)");
        }
        
        // verify the required parameter 'joinConferenceRequest' is set
        if (joinConferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'joinConferenceRequest' when calling conferenceJoin(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceJoinCall(id, joinConferenceRequest, _callback);
        return localVarCall;

    }

    /**
     * Join a conference
     * Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the &#x60;call_control_id&#x60; of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     * @param id Uniquely identifies the conference by id or name (required)
     * @param joinConferenceRequest Join Conference request object (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceJoin(String id, JoinConferenceRequest joinConferenceRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceJoinWithHttpInfo(id, joinConferenceRequest);
        return localVarResp.getData();
    }

    /**
     * Join a conference
     * Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the &#x60;call_control_id&#x60; of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     * @param id Uniquely identifies the conference by id or name (required)
     * @param joinConferenceRequest Join Conference request object (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceJoinWithHttpInfo(String id, JoinConferenceRequest joinConferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceJoinValidateBeforeCall(id, joinConferenceRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join a conference (asynchronously)
     * Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the &#x60;call_control_id&#x60; of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
     * @param id Uniquely identifies the conference by id or name (required)
     * @param joinConferenceRequest Join Conference request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceJoinAsync(String id, JoinConferenceRequest joinConferenceRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceJoinValidateBeforeCall(id, joinConferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceMuteParticipants
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceMuteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceMuteParticipantsCall(String id, ConferenceMuteRequest conferenceMuteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferenceMuteRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/mute"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceMuteParticipantsValidateBeforeCall(String id, ConferenceMuteRequest conferenceMuteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceMuteParticipants(Async)");
        }
        
        // verify the required parameter 'conferenceMuteRequest' is set
        if (conferenceMuteRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceMuteRequest' when calling conferenceMuteParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceMuteParticipantsCall(id, conferenceMuteRequest, _callback);
        return localVarCall;

    }

    /**
     * Mute conference participants
     * Mute a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceMuteRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceMuteParticipants(String id, ConferenceMuteRequest conferenceMuteRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceMuteParticipantsWithHttpInfo(id, conferenceMuteRequest);
        return localVarResp.getData();
    }

    /**
     * Mute conference participants
     * Mute a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceMuteRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceMuteParticipantsWithHttpInfo(String id, ConferenceMuteRequest conferenceMuteRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceMuteParticipantsValidateBeforeCall(id, conferenceMuteRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mute conference participants (asynchronously)
     * Mute a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceMuteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceMuteParticipantsAsync(String id, ConferenceMuteRequest conferenceMuteRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceMuteParticipantsValidateBeforeCall(id, conferenceMuteRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferencePlayAudio
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferencePlayRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferencePlayAudioCall(String id, ConferencePlayRequest conferencePlayRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferencePlayRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/play"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferencePlayAudioValidateBeforeCall(String id, ConferencePlayRequest conferencePlayRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferencePlayAudio(Async)");
        }
        
        // verify the required parameter 'conferencePlayRequest' is set
        if (conferencePlayRequest == null) {
            throw new ApiException("Missing the required parameter 'conferencePlayRequest' when calling conferencePlayAudio(Async)");
        }
        

        okhttp3.Call localVarCall = conferencePlayAudioCall(id, conferencePlayRequest, _callback);
        return localVarCall;

    }

    /**
     * Play audio to conference participants
     * Play audio to all or some participants on a conference call.
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferencePlayRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferencePlayAudio(String id, ConferencePlayRequest conferencePlayRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferencePlayAudioWithHttpInfo(id, conferencePlayRequest);
        return localVarResp.getData();
    }

    /**
     * Play audio to conference participants
     * Play audio to all or some participants on a conference call.
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferencePlayRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferencePlayAudioWithHttpInfo(String id, ConferencePlayRequest conferencePlayRequest) throws ApiException {
        okhttp3.Call localVarCall = conferencePlayAudioValidateBeforeCall(id, conferencePlayRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Play audio to conference participants (asynchronously)
     * Play audio to all or some participants on a conference call.
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferencePlayRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferencePlayAudioAsync(String id, ConferencePlayRequest conferencePlayRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferencePlayAudioValidateBeforeCall(id, conferencePlayRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceSpeakText
     * @param id Specifies the conference by id or name (required)
     * @param conferenceSpeakRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceSpeakTextCall(String id, ConferenceSpeakRequest conferenceSpeakRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferenceSpeakRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/speak"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceSpeakTextValidateBeforeCall(String id, ConferenceSpeakRequest conferenceSpeakRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceSpeakText(Async)");
        }
        
        // verify the required parameter 'conferenceSpeakRequest' is set
        if (conferenceSpeakRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceSpeakRequest' when calling conferenceSpeakText(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceSpeakTextCall(id, conferenceSpeakRequest, _callback);
        return localVarCall;

    }

    /**
     * Speak text to conference participants
     * Convert text to speech and play it to all or some participants.
     * @param id Specifies the conference by id or name (required)
     * @param conferenceSpeakRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceSpeakText(String id, ConferenceSpeakRequest conferenceSpeakRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceSpeakTextWithHttpInfo(id, conferenceSpeakRequest);
        return localVarResp.getData();
    }

    /**
     * Speak text to conference participants
     * Convert text to speech and play it to all or some participants.
     * @param id Specifies the conference by id or name (required)
     * @param conferenceSpeakRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceSpeakTextWithHttpInfo(String id, ConferenceSpeakRequest conferenceSpeakRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceSpeakTextValidateBeforeCall(id, conferenceSpeakRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Speak text to conference participants (asynchronously)
     * Convert text to speech and play it to all or some participants.
     * @param id Specifies the conference by id or name (required)
     * @param conferenceSpeakRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceSpeakTextAsync(String id, ConferenceSpeakRequest conferenceSpeakRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceSpeakTextValidateBeforeCall(id, conferenceSpeakRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceStartRecording
     * @param id Specifies the conference to record by id or name (required)
     * @param startRecordingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceStartRecordingCall(String id, StartRecordingRequest startRecordingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = startRecordingRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/record_start"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceStartRecordingValidateBeforeCall(String id, StartRecordingRequest startRecordingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceStartRecording(Async)");
        }
        
        // verify the required parameter 'startRecordingRequest' is set
        if (startRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'startRecordingRequest' when calling conferenceStartRecording(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceStartRecordingCall(id, startRecordingRequest, _callback);
        return localVarCall;

    }

    /**
     * Conference recording start
     * Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60;
     * @param id Specifies the conference to record by id or name (required)
     * @param startRecordingRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceStartRecording(String id, StartRecordingRequest startRecordingRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceStartRecordingWithHttpInfo(id, startRecordingRequest);
        return localVarResp.getData();
    }

    /**
     * Conference recording start
     * Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60;
     * @param id Specifies the conference to record by id or name (required)
     * @param startRecordingRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceStartRecordingWithHttpInfo(String id, StartRecordingRequest startRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceStartRecordingValidateBeforeCall(id, startRecordingRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Conference recording start (asynchronously)
     * Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60;
     * @param id Specifies the conference to record by id or name (required)
     * @param startRecordingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceStartRecordingAsync(String id, StartRecordingRequest startRecordingRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceStartRecordingValidateBeforeCall(id, startRecordingRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceStopRecording
     * @param id Specifies the conference to stop the recording for by id or name (required)
     * @param stopRecordingRequest Stop recording conference request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceStopRecordingCall(String id, StopRecordingRequest stopRecordingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stopRecordingRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/record_stop"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceStopRecordingValidateBeforeCall(String id, StopRecordingRequest stopRecordingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceStopRecording(Async)");
        }
        
        // verify the required parameter 'stopRecordingRequest' is set
        if (stopRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'stopRecordingRequest' when calling conferenceStopRecording(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceStopRecordingCall(id, stopRecordingRequest, _callback);
        return localVarCall;

    }

    /**
     * Conference recording stop
     * Stop recording the conference.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60; 
     * @param id Specifies the conference to stop the recording for by id or name (required)
     * @param stopRecordingRequest Stop recording conference request (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceStopRecording(String id, StopRecordingRequest stopRecordingRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceStopRecordingWithHttpInfo(id, stopRecordingRequest);
        return localVarResp.getData();
    }

    /**
     * Conference recording stop
     * Stop recording the conference.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60; 
     * @param id Specifies the conference to stop the recording for by id or name (required)
     * @param stopRecordingRequest Stop recording conference request (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceStopRecordingWithHttpInfo(String id, StopRecordingRequest stopRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceStopRecordingValidateBeforeCall(id, stopRecordingRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Conference recording stop (asynchronously)
     * Stop recording the conference.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60; 
     * @param id Specifies the conference to stop the recording for by id or name (required)
     * @param stopRecordingRequest Stop recording conference request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceStopRecordingAsync(String id, StopRecordingRequest stopRecordingRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceStopRecordingValidateBeforeCall(id, stopRecordingRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceUnholdParticipants
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnholdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceUnholdParticipantsCall(String id, ConferenceUnholdRequest conferenceUnholdRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferenceUnholdRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/unhold"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceUnholdParticipantsValidateBeforeCall(String id, ConferenceUnholdRequest conferenceUnholdRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceUnholdParticipants(Async)");
        }
        
        // verify the required parameter 'conferenceUnholdRequest' is set
        if (conferenceUnholdRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceUnholdRequest' when calling conferenceUnholdParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceUnholdParticipantsCall(id, conferenceUnholdRequest, _callback);
        return localVarCall;

    }

    /**
     * Unhold conference participants
     * Unhold a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnholdRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceUnholdParticipants(String id, ConferenceUnholdRequest conferenceUnholdRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceUnholdParticipantsWithHttpInfo(id, conferenceUnholdRequest);
        return localVarResp.getData();
    }

    /**
     * Unhold conference participants
     * Unhold a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnholdRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceUnholdParticipantsWithHttpInfo(String id, ConferenceUnholdRequest conferenceUnholdRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceUnholdParticipantsValidateBeforeCall(id, conferenceUnholdRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unhold conference participants (asynchronously)
     * Unhold a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnholdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceUnholdParticipantsAsync(String id, ConferenceUnholdRequest conferenceUnholdRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceUnholdParticipantsValidateBeforeCall(id, conferenceUnholdRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conferenceUnmuteParticipants
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnmuteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceUnmuteParticipantsCall(String id, ConferenceUnmuteRequest conferenceUnmuteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conferenceUnmuteRequest;

        // create path and map variables
        String localVarPath = "/conferences/{id}/actions/unmute"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceUnmuteParticipantsValidateBeforeCall(String id, ConferenceUnmuteRequest conferenceUnmuteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conferenceUnmuteParticipants(Async)");
        }
        
        // verify the required parameter 'conferenceUnmuteRequest' is set
        if (conferenceUnmuteRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceUnmuteRequest' when calling conferenceUnmuteParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = conferenceUnmuteParticipantsCall(id, conferenceUnmuteRequest, _callback);
        return localVarCall;

    }

    /**
     * Unmute conference participants
     * Unmute a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnmuteRequest  (required)
     * @return ConferenceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceCommandResponse conferenceUnmuteParticipants(String id, ConferenceUnmuteRequest conferenceUnmuteRequest) throws ApiException {
        ApiResponse<ConferenceCommandResponse> localVarResp = conferenceUnmuteParticipantsWithHttpInfo(id, conferenceUnmuteRequest);
        return localVarResp.getData();
    }

    /**
     * Unmute conference participants
     * Unmute a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnmuteRequest  (required)
     * @return ApiResponse&lt;ConferenceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceCommandResponse> conferenceUnmuteParticipantsWithHttpInfo(String id, ConferenceUnmuteRequest conferenceUnmuteRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceUnmuteParticipantsValidateBeforeCall(id, conferenceUnmuteRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unmute conference participants (asynchronously)
     * Unmute a list of participants in a conference call
     * @param id Uniquely identifies the conference by id or name (required)
     * @param conferenceUnmuteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a conference command. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conferenceUnmuteParticipantsAsync(String id, ConferenceUnmuteRequest conferenceUnmuteRequest, final ApiCallback<ConferenceCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceUnmuteParticipantsValidateBeforeCall(id, conferenceUnmuteRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createConference
     * @param createConferenceRequest Create a conference (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConferenceCall(CreateConferenceRequest createConferenceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createConferenceRequest;

        // create path and map variables
        String localVarPath = "/conferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConferenceValidateBeforeCall(CreateConferenceRequest createConferenceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createConferenceRequest' is set
        if (createConferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'createConferenceRequest' when calling createConference(Async)");
        }
        

        okhttp3.Call localVarCall = createConferenceCall(createConferenceRequest, _callback);
        return localVarCall;

    }

    /**
     * Create conference
     * Create a conference from an existing call leg using a &#x60;call_control_id&#x60; and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - &#x60;conference.created&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; - &#x60;conference.ended&#x60; - &#x60;conference.recording.saved&#x60; 
     * @param createConferenceRequest Create a conference (required)
     * @return ConferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceResponse createConference(CreateConferenceRequest createConferenceRequest) throws ApiException {
        ApiResponse<ConferenceResponse> localVarResp = createConferenceWithHttpInfo(createConferenceRequest);
        return localVarResp.getData();
    }

    /**
     * Create conference
     * Create a conference from an existing call leg using a &#x60;call_control_id&#x60; and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - &#x60;conference.created&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; - &#x60;conference.ended&#x60; - &#x60;conference.recording.saved&#x60; 
     * @param createConferenceRequest Create a conference (required)
     * @return ApiResponse&lt;ConferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceResponse> createConferenceWithHttpInfo(CreateConferenceRequest createConferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = createConferenceValidateBeforeCall(createConferenceRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create conference (asynchronously)
     * Create a conference from an existing call leg using a &#x60;call_control_id&#x60; and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - &#x60;conference.created&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; - &#x60;conference.ended&#x60; - &#x60;conference.recording.saved&#x60; 
     * @param createConferenceRequest Create a conference (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConferenceAsync(CreateConferenceRequest createConferenceRequest, final ApiCallback<ConferenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConferenceValidateBeforeCall(createConferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConferenceParticipants
     * @param conferenceId Uniquely identifies the conference by id or name (required)
     * @param filterMuted If present, participants will be filtered to those who are/are not muted (optional)
     * @param filterOnHold If present, participants will be filtered to those who are/are not put on hold (optional)
     * @param filterWhispering If present, participants will be filtered to those who are whispering or are not (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conference participants. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConferenceParticipantsCall(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conferences/{conference_id}/participants"
            .replaceAll("\\{" + "conference_id" + "\\}", localVarApiClient.escapeString(conferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterMuted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[muted]", filterMuted));
        }

        if (filterOnHold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[on_hold]", filterOnHold));
        }

        if (filterWhispering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[whispering]", filterWhispering));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConferenceParticipantsValidateBeforeCall(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'conferenceId' is set
        if (conferenceId == null) {
            throw new ApiException("Missing the required parameter 'conferenceId' when calling listConferenceParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = listConferenceParticipantsCall(conferenceId, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List conference participants
     * Lists conference participants
     * @param conferenceId Uniquely identifies the conference by id or name (required)
     * @param filterMuted If present, participants will be filtered to those who are/are not muted (optional)
     * @param filterOnHold If present, participants will be filtered to those who are/are not put on hold (optional)
     * @param filterWhispering If present, participants will be filtered to those who are whispering or are not (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ListParticipantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conference participants. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ListParticipantsResponse listConferenceParticipants(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ListParticipantsResponse> localVarResp = listConferenceParticipantsWithHttpInfo(conferenceId, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * List conference participants
     * Lists conference participants
     * @param conferenceId Uniquely identifies the conference by id or name (required)
     * @param filterMuted If present, participants will be filtered to those who are/are not muted (optional)
     * @param filterOnHold If present, participants will be filtered to those who are/are not put on hold (optional)
     * @param filterWhispering If present, participants will be filtered to those who are whispering or are not (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ApiResponse&lt;ListParticipantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conference participants. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListParticipantsResponse> listConferenceParticipantsWithHttpInfo(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listConferenceParticipantsValidateBeforeCall(conferenceId, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListParticipantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List conference participants (asynchronously)
     * Lists conference participants
     * @param conferenceId Uniquely identifies the conference by id or name (required)
     * @param filterMuted If present, participants will be filtered to those who are/are not muted (optional)
     * @param filterOnHold If present, participants will be filtered to those who are/are not put on hold (optional)
     * @param filterWhispering If present, participants will be filtered to those who are whispering or are not (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conference participants. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConferenceParticipantsAsync(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize, final ApiCallback<ListParticipantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConferenceParticipantsValidateBeforeCall(conferenceId, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListParticipantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConferences
     * @param filterName If present, conferences will be filtered to those with a matching &#x60;name&#x60; attribute. Matching is case-sensitive (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConferencesCall(String filterName, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[name]", filterName));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConferencesValidateBeforeCall(String filterName, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listConferencesCall(filterName, pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List conferences
     * Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by &#x60;expires_at&#x60;.
     * @param filterName If present, conferences will be filtered to those with a matching &#x60;name&#x60; attribute. Matching is case-sensitive (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ListConferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ListConferencesResponse listConferences(String filterName, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ListConferencesResponse> localVarResp = listConferencesWithHttpInfo(filterName, pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * List conferences
     * Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by &#x60;expires_at&#x60;.
     * @param filterName If present, conferences will be filtered to those with a matching &#x60;name&#x60; attribute. Matching is case-sensitive (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ApiResponse&lt;ListConferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConferencesResponse> listConferencesWithHttpInfo(String filterName, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listConferencesValidateBeforeCall(filterName, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListConferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List conferences (asynchronously)
     * Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by &#x60;expires_at&#x60;.
     * @param filterName If present, conferences will be filtered to those with a matching &#x60;name&#x60; attribute. Matching is case-sensitive (optional)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of conferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConferencesAsync(String filterName, Integer pageNumber, Integer pageSize, final ApiCallback<ListConferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConferencesValidateBeforeCall(filterName, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListConferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveConference
     * @param id Uniquely identifies the conference by id or name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveConferenceCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveConferenceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveConference(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveConferenceCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a conference
     * Retrieve an existing conference
     * @param id Uniquely identifies the conference by id or name (required)
     * @return ConferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceResponse retrieveConference(String id) throws ApiException {
        ApiResponse<ConferenceResponse> localVarResp = retrieveConferenceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a conference
     * Retrieve an existing conference
     * @param id Uniquely identifies the conference by id or name (required)
     * @return ApiResponse&lt;ConferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceResponse> retrieveConferenceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = retrieveConferenceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConferenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a conference (asynchronously)
     * Retrieve an existing conference
     * @param id Uniquely identifies the conference by id or name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a conference. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Conference does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveConferenceAsync(String id, final ApiCallback<ConferenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveConferenceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConferenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
