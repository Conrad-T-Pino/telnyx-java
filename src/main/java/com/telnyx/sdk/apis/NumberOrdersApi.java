/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.CreateNumberOrderRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberOrdersResponse;
import com.telnyx.sdk.models.NumberOrderResponse;
import com.telnyx.sdk.models.UpdateNumberOrderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberOrdersApi {
    private ApiClient localVarApiClient;

    public NumberOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createNumberOrderCall(CreateNumberOrderRequest createNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createNumberOrderRequest;

        // create path and map variables
        String localVarPath = "/number_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNumberOrderValidateBeforeCall(CreateNumberOrderRequest createNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createNumberOrderRequest' is set
        if (createNumberOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'createNumberOrderRequest' when calling createNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = createNumberOrderCall(createNumberOrderRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderResponse> createNumberOrderWithHttpInfo(CreateNumberOrderRequest createNumberOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createNumberOrderValidateBeforeCall(createNumberOrderRequest, null);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNumberOrderAsync(CreateNumberOrderRequest createNumberOrderRequest, final ApiCallback<NumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNumberOrderValidateBeforeCall(createNumberOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNumberOrderRequest {
        private final CreateNumberOrderRequest createNumberOrderRequest;

        private APIcreateNumberOrderRequest(CreateNumberOrderRequest createNumberOrderRequest) {
            this.createNumberOrderRequest = createNumberOrderRequest;
        }

        /**
         * Build call for createNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNumberOrderCall(createNumberOrderRequest, _callback);
        }

        /**
         * Execute createNumberOrder request
         * @return NumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderResponse execute() throws ApiException {
            ApiResponse<NumberOrderResponse> localVarResp = createNumberOrderWithHttpInfo(createNumberOrderRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return createNumberOrderWithHttpInfo(createNumberOrderRequest);
        }

        /**
         * Execute createNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderResponse> _callback) throws ApiException {
            return createNumberOrderAsync(createNumberOrderRequest, _callback);
        }
    }

    /**
     * Create a number order
     * Creates a phone number order.
     * @param createNumberOrderRequest  (required)
     * @return APIcreateNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNumberOrderRequest createNumberOrder(CreateNumberOrderRequest createNumberOrderRequest) {
        return new APIcreateNumberOrderRequest(createNumberOrderRequest);
    }
    private okhttp3.Call listNumberOrdersCall(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[status]", filterStatus));
        }

        if (filterCreatedAtGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at][gt]", filterCreatedAtGt));
        }

        if (filterCreatedAtLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at][lt]", filterCreatedAtLt));
        }

        if (filterPhoneNumbersPhoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[phone_numbers.phone_number]", filterPhoneNumbersPhoneNumber));
        }

        if (filterCustomerReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[customer_reference]", filterCustomerReference));
        }

        if (filterRequirementsMet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirements_met]", filterRequirementsMet));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNumberOrdersValidateBeforeCall(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listNumberOrdersCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize, _callback);
        return localVarCall;

    }


    private ApiResponse<ListNumberOrdersResponse> listNumberOrdersWithHttpInfo(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listNumberOrdersValidateBeforeCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListNumberOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listNumberOrdersAsync(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, Integer pageNumber, Integer pageSize, final ApiCallback<ListNumberOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNumberOrdersValidateBeforeCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListNumberOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistNumberOrdersRequest {
        private String filterStatus;
        private String filterCreatedAtGt;
        private String filterCreatedAtLt;
        private String filterPhoneNumbersPhoneNumber;
        private String filterCustomerReference;
        private Boolean filterRequirementsMet;
        private Integer pageNumber;
        private Integer pageSize;

        private APIlistNumberOrdersRequest() {
        }

        /**
         * Set filterStatus
         * @param filterStatus Filter number orders by status. (optional)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest filterStatus(String filterStatus) {
            this.filterStatus = filterStatus;
            return this;
        }

        /**
         * Set filterCreatedAtGt
         * @param filterCreatedAtGt Filter number orders later than this value. (optional)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest filterCreatedAtGt(String filterCreatedAtGt) {
            this.filterCreatedAtGt = filterCreatedAtGt;
            return this;
        }

        /**
         * Set filterCreatedAtLt
         * @param filterCreatedAtLt Filter number orders earlier than this value. (optional)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest filterCreatedAtLt(String filterCreatedAtLt) {
            this.filterCreatedAtLt = filterCreatedAtLt;
            return this;
        }

        /**
         * Set filterPhoneNumbersPhoneNumber
         * @param filterPhoneNumbersPhoneNumber Filter number orders having these phone numbers. (optional)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest filterPhoneNumbersPhoneNumber(String filterPhoneNumbersPhoneNumber) {
            this.filterPhoneNumbersPhoneNumber = filterPhoneNumbersPhoneNumber;
            return this;
        }

        /**
         * Set filterCustomerReference
         * @param filterCustomerReference Filter number orders via the customer reference set. (optional)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest filterCustomerReference(String filterCustomerReference) {
            this.filterCustomerReference = filterCustomerReference;
            return this;
        }

        /**
         * Set filterRequirementsMet
         * @param filterRequirementsMet Filter number orders by requirements met. (optional)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest filterRequirementsMet(Boolean filterRequirementsMet) {
            this.filterRequirementsMet = filterRequirementsMet;
            return this;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number to load (optional, default to 1)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize The size of the page (optional, default to 20)
         * @return APIlistNumberOrdersRequest
         */
        public APIlistNumberOrdersRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for listNumberOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listNumberOrdersCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize, _callback);
        }

        /**
         * Execute listNumberOrders request
         * @return ListNumberOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ListNumberOrdersResponse execute() throws ApiException {
            ApiResponse<ListNumberOrdersResponse> localVarResp = listNumberOrdersWithHttpInfo(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute listNumberOrders request with HTTP info returned
         * @return ApiResponse&lt;ListNumberOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListNumberOrdersResponse> executeWithHttpInfo() throws ApiException {
            return listNumberOrdersWithHttpInfo(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize);
        }

        /**
         * Execute listNumberOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListNumberOrdersResponse> _callback) throws ApiException {
            return listNumberOrdersAsync(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List number orders
     * Get a paginated list of number orders.
     * @return APIlistNumberOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistNumberOrdersRequest listNumberOrders() {
        return new APIlistNumberOrdersRequest();
    }
    private okhttp3.Call retrieveNumberOrderCall(String numberOrderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number_orders/{number_order_id}"
            .replaceAll("\\{" + "number_order_id" + "\\}", localVarApiClient.escapeString(numberOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveNumberOrderValidateBeforeCall(String numberOrderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numberOrderId' is set
        if (numberOrderId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderId' when calling retrieveNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveNumberOrderCall(numberOrderId, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderResponse> retrieveNumberOrderWithHttpInfo(String numberOrderId) throws ApiException {
        okhttp3.Call localVarCall = retrieveNumberOrderValidateBeforeCall(numberOrderId, null);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveNumberOrderAsync(String numberOrderId, final ApiCallback<NumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveNumberOrderValidateBeforeCall(numberOrderId, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIretrieveNumberOrderRequest {
        private final String numberOrderId;

        private APIretrieveNumberOrderRequest(String numberOrderId) {
            this.numberOrderId = numberOrderId;
        }

        /**
         * Build call for retrieveNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveNumberOrderCall(numberOrderId, _callback);
        }

        /**
         * Execute retrieveNumberOrder request
         * @return NumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderResponse execute() throws ApiException {
            ApiResponse<NumberOrderResponse> localVarResp = retrieveNumberOrderWithHttpInfo(numberOrderId);
            return localVarResp.getData();
        }

        /**
         * Execute retrieveNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return retrieveNumberOrderWithHttpInfo(numberOrderId);
        }

        /**
         * Execute retrieveNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderResponse> _callback) throws ApiException {
            return retrieveNumberOrderAsync(numberOrderId, _callback);
        }
    }

    /**
     * Retrieve a number order
     * Get an existing phone number order.
     * @param numberOrderId The number order ID. (required)
     * @return APIretrieveNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIretrieveNumberOrderRequest retrieveNumberOrder(String numberOrderId) {
        return new APIretrieveNumberOrderRequest(numberOrderId);
    }
    private okhttp3.Call updateNumberOrderCall(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateNumberOrderRequest;

        // create path and map variables
        String localVarPath = "/number_orders/{number_order_id}"
            .replaceAll("\\{" + "number_order_id" + "\\}", localVarApiClient.escapeString(numberOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNumberOrderValidateBeforeCall(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numberOrderId' is set
        if (numberOrderId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderId' when calling updateNumberOrder(Async)");
        }
        
        // verify the required parameter 'updateNumberOrderRequest' is set
        if (updateNumberOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNumberOrderRequest' when calling updateNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = updateNumberOrderCall(numberOrderId, updateNumberOrderRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderResponse> updateNumberOrderWithHttpInfo(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNumberOrderValidateBeforeCall(numberOrderId, updateNumberOrderRequest, null);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNumberOrderAsync(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest, final ApiCallback<NumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNumberOrderValidateBeforeCall(numberOrderId, updateNumberOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateNumberOrderRequest {
        private final String numberOrderId;
        private final UpdateNumberOrderRequest updateNumberOrderRequest;

        private APIupdateNumberOrderRequest(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest) {
            this.numberOrderId = numberOrderId;
            this.updateNumberOrderRequest = updateNumberOrderRequest;
        }

        /**
         * Build call for updateNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateNumberOrderCall(numberOrderId, updateNumberOrderRequest, _callback);
        }

        /**
         * Execute updateNumberOrder request
         * @return NumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderResponse execute() throws ApiException {
            ApiResponse<NumberOrderResponse> localVarResp = updateNumberOrderWithHttpInfo(numberOrderId, updateNumberOrderRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return updateNumberOrderWithHttpInfo(numberOrderId, updateNumberOrderRequest);
        }

        /**
         * Execute updateNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderResponse> _callback) throws ApiException {
            return updateNumberOrderAsync(numberOrderId, updateNumberOrderRequest, _callback);
        }
    }

    /**
     * Update a number order
     * Updates a phone number order.
     * @param numberOrderId The number order ID. (required)
     * @param updateNumberOrderRequest  (required)
     * @return APIupdateNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateNumberOrderRequest updateNumberOrder(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest) {
        return new APIupdateNumberOrderRequest(numberOrderId, updateNumberOrderRequest);
    }
}
