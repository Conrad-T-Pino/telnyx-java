/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.CreateNumberOrderRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberOrdersResponse;
import com.telnyx.sdk.models.NumberOrderResponse;
import com.telnyx.sdk.models.UpdateNumberOrderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberOrdersApi {
    private ApiClient localVarApiClient;

    public NumberOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createNumberOrder
     * @param createNumberOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNumberOrderCall(CreateNumberOrderRequest createNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createNumberOrderRequest;

        // create path and map variables
        String localVarPath = "/number_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNumberOrderValidateBeforeCall(CreateNumberOrderRequest createNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createNumberOrderRequest' is set
        if (createNumberOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'createNumberOrderRequest' when calling createNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = createNumberOrderCall(createNumberOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a number order
     * Creates a phone number order.
     * @param createNumberOrderRequest  (required)
     * @return NumberOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NumberOrderResponse createNumberOrder(CreateNumberOrderRequest createNumberOrderRequest) throws ApiException {
        ApiResponse<NumberOrderResponse> localVarResp = createNumberOrderWithHttpInfo(createNumberOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Create a number order
     * Creates a phone number order.
     * @param createNumberOrderRequest  (required)
     * @return ApiResponse&lt;NumberOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumberOrderResponse> createNumberOrderWithHttpInfo(CreateNumberOrderRequest createNumberOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createNumberOrderValidateBeforeCall(createNumberOrderRequest, null);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a number order (asynchronously)
     * Creates a phone number order.
     * @param createNumberOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNumberOrderAsync(CreateNumberOrderRequest createNumberOrderRequest, final ApiCallback<NumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNumberOrderValidateBeforeCall(createNumberOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNumberOrders
     * @param filterStatus Filter number orders by status. (optional)
     * @param filterCreatedAtGt Filter number orders later than this value. (optional)
     * @param filterCreatedAtLt Filter number orders earlier than this value. (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number orders having these phone numbers. (optional)
     * @param filterCustomerReference Filter number orders via the customer reference set. (optional)
     * @param filterRequirementsMet Filter number orders by requirements met. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNumberOrdersCall(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[status]", filterStatus));
        }

        if (filterCreatedAtGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at][gt]", filterCreatedAtGt));
        }

        if (filterCreatedAtLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at][lt]", filterCreatedAtLt));
        }

        if (filterPhoneNumbersPhoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[phone_numbers.phone_number]", filterPhoneNumbersPhoneNumber));
        }

        if (filterCustomerReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[customer_reference]", filterCustomerReference));
        }

        if (filterRequirementsMet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirements_met]", filterRequirementsMet));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNumberOrdersValidateBeforeCall(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listNumberOrdersCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, _callback);
        return localVarCall;

    }

    /**
     * List number orders
     * Get a paginated list of number orders.
     * @param filterStatus Filter number orders by status. (optional)
     * @param filterCreatedAtGt Filter number orders later than this value. (optional)
     * @param filterCreatedAtLt Filter number orders earlier than this value. (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number orders having these phone numbers. (optional)
     * @param filterCustomerReference Filter number orders via the customer reference set. (optional)
     * @param filterRequirementsMet Filter number orders by requirements met. (optional)
     * @return ListNumberOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListNumberOrdersResponse listNumberOrders(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet) throws ApiException {
        ApiResponse<ListNumberOrdersResponse> localVarResp = listNumberOrdersWithHttpInfo(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet);
        return localVarResp.getData();
    }

    /**
     * List number orders
     * Get a paginated list of number orders.
     * @param filterStatus Filter number orders by status. (optional)
     * @param filterCreatedAtGt Filter number orders later than this value. (optional)
     * @param filterCreatedAtLt Filter number orders earlier than this value. (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number orders having these phone numbers. (optional)
     * @param filterCustomerReference Filter number orders via the customer reference set. (optional)
     * @param filterRequirementsMet Filter number orders by requirements met. (optional)
     * @return ApiResponse&lt;ListNumberOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNumberOrdersResponse> listNumberOrdersWithHttpInfo(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet) throws ApiException {
        okhttp3.Call localVarCall = listNumberOrdersValidateBeforeCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, null);
        Type localVarReturnType = new TypeToken<ListNumberOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List number orders (asynchronously)
     * Get a paginated list of number orders.
     * @param filterStatus Filter number orders by status. (optional)
     * @param filterCreatedAtGt Filter number orders later than this value. (optional)
     * @param filterCreatedAtLt Filter number orders earlier than this value. (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number orders having these phone numbers. (optional)
     * @param filterCustomerReference Filter number orders via the customer reference set. (optional)
     * @param filterRequirementsMet Filter number orders by requirements met. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number orders. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNumberOrdersAsync(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, Boolean filterRequirementsMet, final ApiCallback<ListNumberOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNumberOrdersValidateBeforeCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, filterRequirementsMet, _callback);
        Type localVarReturnType = new TypeToken<ListNumberOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveNumberOrder
     * @param numberOrderId The number order ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveNumberOrderCall(String numberOrderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number_orders/{number_order_id}"
            .replaceAll("\\{" + "number_order_id" + "\\}", localVarApiClient.escapeString(numberOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveNumberOrderValidateBeforeCall(String numberOrderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numberOrderId' is set
        if (numberOrderId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderId' when calling retrieveNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveNumberOrderCall(numberOrderId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a number order
     * Get an existing phone number order.
     * @param numberOrderId The number order ID. (required)
     * @return NumberOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NumberOrderResponse retrieveNumberOrder(String numberOrderId) throws ApiException {
        ApiResponse<NumberOrderResponse> localVarResp = retrieveNumberOrderWithHttpInfo(numberOrderId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a number order
     * Get an existing phone number order.
     * @param numberOrderId The number order ID. (required)
     * @return ApiResponse&lt;NumberOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumberOrderResponse> retrieveNumberOrderWithHttpInfo(String numberOrderId) throws ApiException {
        okhttp3.Call localVarCall = retrieveNumberOrderValidateBeforeCall(numberOrderId, null);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a number order (asynchronously)
     * Get an existing phone number order.
     * @param numberOrderId The number order ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveNumberOrderAsync(String numberOrderId, final ApiCallback<NumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveNumberOrderValidateBeforeCall(numberOrderId, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNumberOrder
     * @param numberOrderId The number order ID. (required)
     * @param updateNumberOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNumberOrderCall(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateNumberOrderRequest;

        // create path and map variables
        String localVarPath = "/number_orders/{number_order_id}"
            .replaceAll("\\{" + "number_order_id" + "\\}", localVarApiClient.escapeString(numberOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNumberOrderValidateBeforeCall(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numberOrderId' is set
        if (numberOrderId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderId' when calling updateNumberOrder(Async)");
        }
        
        // verify the required parameter 'updateNumberOrderRequest' is set
        if (updateNumberOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNumberOrderRequest' when calling updateNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = updateNumberOrderCall(numberOrderId, updateNumberOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a number order
     * Updates a phone number order.
     * @param numberOrderId The number order ID. (required)
     * @param updateNumberOrderRequest  (required)
     * @return NumberOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NumberOrderResponse updateNumberOrder(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest) throws ApiException {
        ApiResponse<NumberOrderResponse> localVarResp = updateNumberOrderWithHttpInfo(numberOrderId, updateNumberOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Update a number order
     * Updates a phone number order.
     * @param numberOrderId The number order ID. (required)
     * @param updateNumberOrderRequest  (required)
     * @return ApiResponse&lt;NumberOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumberOrderResponse> updateNumberOrderWithHttpInfo(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNumberOrderValidateBeforeCall(numberOrderId, updateNumberOrderRequest, null);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a number order (asynchronously)
     * Updates a phone number order.
     * @param numberOrderId The number order ID. (required)
     * @param updateNumberOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNumberOrderAsync(String numberOrderId, UpdateNumberOrderRequest updateNumberOrderRequest, final ApiCallback<NumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNumberOrderValidateBeforeCall(numberOrderId, updateNumberOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
