/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListCallEventsResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DebuggingApi {
    private ApiClient localVarApiClient;

    public DebuggingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DebuggingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listCallEvents
     * @param filterCallLegId The unique identifier of an individual call leg. (optional)
     * @param filterCallSessionId The unique identifier of the call control session. A session may include multiple call leg events. (optional)
     * @param filterStatus Event status (optional)
     * @param filterType Event type (optional)
     * @param filterEventTimestampGt Event timestamp: greater than (optional)
     * @param filterEventTimestampGte Event timestamp: greater than or equal (optional)
     * @param filterEventTimestampLt Event timestamp: lower than (optional)
     * @param filterEventTimestampLte Event timestamp: lower than or equal (optional)
     * @param filterEventTimestampEq Event timestamp: equal (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of call events. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCallEventsCall(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/call_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterCallLegId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[call_leg_id]", filterCallLegId));
        }

        if (filterCallSessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[call_session_id]", filterCallSessionId));
        }

        if (filterStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[status]", filterStatus));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[type]", filterType));
        }

        if (filterEventTimestampGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[event_timestamp][gt]", filterEventTimestampGt));
        }

        if (filterEventTimestampGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[event_timestamp][gte]", filterEventTimestampGte));
        }

        if (filterEventTimestampLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[event_timestamp][lt]", filterEventTimestampLt));
        }

        if (filterEventTimestampLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[event_timestamp][lte]", filterEventTimestampLte));
        }

        if (filterEventTimestampEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[event_timestamp][eq]", filterEventTimestampEq));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCallEventsValidateBeforeCall(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCallEventsCall(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq, _callback);
        return localVarCall;

    }

    /**
     * List call events
     * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
     * @param filterCallLegId The unique identifier of an individual call leg. (optional)
     * @param filterCallSessionId The unique identifier of the call control session. A session may include multiple call leg events. (optional)
     * @param filterStatus Event status (optional)
     * @param filterType Event type (optional)
     * @param filterEventTimestampGt Event timestamp: greater than (optional)
     * @param filterEventTimestampGte Event timestamp: greater than or equal (optional)
     * @param filterEventTimestampLt Event timestamp: lower than (optional)
     * @param filterEventTimestampLte Event timestamp: lower than or equal (optional)
     * @param filterEventTimestampEq Event timestamp: equal (optional)
     * @return ListCallEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of call events. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListCallEventsResponse listCallEvents(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq) throws ApiException {
        ApiResponse<ListCallEventsResponse> localVarResp = listCallEventsWithHttpInfo(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq);
        return localVarResp.getData();
    }

    /**
     * List call events
     * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
     * @param filterCallLegId The unique identifier of an individual call leg. (optional)
     * @param filterCallSessionId The unique identifier of the call control session. A session may include multiple call leg events. (optional)
     * @param filterStatus Event status (optional)
     * @param filterType Event type (optional)
     * @param filterEventTimestampGt Event timestamp: greater than (optional)
     * @param filterEventTimestampGte Event timestamp: greater than or equal (optional)
     * @param filterEventTimestampLt Event timestamp: lower than (optional)
     * @param filterEventTimestampLte Event timestamp: lower than or equal (optional)
     * @param filterEventTimestampEq Event timestamp: equal (optional)
     * @return ApiResponse&lt;ListCallEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of call events. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCallEventsResponse> listCallEventsWithHttpInfo(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq) throws ApiException {
        okhttp3.Call localVarCall = listCallEventsValidateBeforeCall(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq, null);
        Type localVarReturnType = new TypeToken<ListCallEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List call events (asynchronously)
     * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
     * @param filterCallLegId The unique identifier of an individual call leg. (optional)
     * @param filterCallSessionId The unique identifier of the call control session. A session may include multiple call leg events. (optional)
     * @param filterStatus Event status (optional)
     * @param filterType Event type (optional)
     * @param filterEventTimestampGt Event timestamp: greater than (optional)
     * @param filterEventTimestampGte Event timestamp: greater than or equal (optional)
     * @param filterEventTimestampLt Event timestamp: lower than (optional)
     * @param filterEventTimestampLte Event timestamp: lower than or equal (optional)
     * @param filterEventTimestampEq Event timestamp: equal (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of call events. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCallEventsAsync(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq, final ApiCallback<ListCallEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCallEventsValidateBeforeCall(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq, _callback);
        Type localVarReturnType = new TypeToken<ListCallEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
