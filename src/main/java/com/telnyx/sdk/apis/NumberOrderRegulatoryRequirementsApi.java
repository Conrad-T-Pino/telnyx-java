/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberOrderRegulatoryRequirementsResponse;
import com.telnyx.sdk.models.ListPhoneNumberRegulatoryRequirementsResponse;
import com.telnyx.sdk.models.NumberOrderRegulatoryRequirementResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberOrderRegulatoryRequirementsApi {
    private ApiClient localVarApiClient;

    public NumberOrderRegulatoryRequirementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberOrderRegulatoryRequirementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listNumberOrderRegulatoryRequirementsCall(String filterRequirementId, String filterFieldType, String filterRequirementType, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regulatory_requirements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterRequirementId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirement_id]", filterRequirementId));
        }

        if (filterFieldType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[field_type]", filterFieldType));
        }

        if (filterRequirementType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirement_type]", filterRequirementType));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNumberOrderRegulatoryRequirementsValidateBeforeCall(String filterRequirementId, String filterFieldType, String filterRequirementType, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listNumberOrderRegulatoryRequirementsCall(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize, _callback);
        return localVarCall;

    }


    private ApiResponse<ListNumberOrderRegulatoryRequirementsResponse> listNumberOrderRegulatoryRequirementsWithHttpInfo(String filterRequirementId, String filterFieldType, String filterRequirementType, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listNumberOrderRegulatoryRequirementsValidateBeforeCall(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListNumberOrderRegulatoryRequirementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listNumberOrderRegulatoryRequirementsAsync(String filterRequirementId, String filterFieldType, String filterRequirementType, Integer pageNumber, Integer pageSize, final ApiCallback<ListNumberOrderRegulatoryRequirementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNumberOrderRegulatoryRequirementsValidateBeforeCall(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListNumberOrderRegulatoryRequirementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistNumberOrderRegulatoryRequirementsRequest {
        private String filterRequirementId;
        private String filterFieldType;
        private String filterRequirementType;
        private Integer pageNumber;
        private Integer pageSize;

        private APIlistNumberOrderRegulatoryRequirementsRequest() {
        }

        /**
         * Set filterRequirementId
         * @param filterRequirementId Filter number order regulatory requirements by &#x60;requirement_id&#x60;. (optional)
         * @return APIlistNumberOrderRegulatoryRequirementsRequest
         */
        public APIlistNumberOrderRegulatoryRequirementsRequest filterRequirementId(String filterRequirementId) {
            this.filterRequirementId = filterRequirementId;
            return this;
        }

        /**
         * Set filterFieldType
         * @param filterFieldType Filter number order regulatory requirements by &#x60;field_type&#x60;. (optional)
         * @return APIlistNumberOrderRegulatoryRequirementsRequest
         */
        public APIlistNumberOrderRegulatoryRequirementsRequest filterFieldType(String filterFieldType) {
            this.filterFieldType = filterFieldType;
            return this;
        }

        /**
         * Set filterRequirementType
         * @param filterRequirementType Filter number order regulatory requirements by &#x60;requirement_type&#x60;. (optional)
         * @return APIlistNumberOrderRegulatoryRequirementsRequest
         */
        public APIlistNumberOrderRegulatoryRequirementsRequest filterRequirementType(String filterRequirementType) {
            this.filterRequirementType = filterRequirementType;
            return this;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number to load (optional, default to 1)
         * @return APIlistNumberOrderRegulatoryRequirementsRequest
         */
        public APIlistNumberOrderRegulatoryRequirementsRequest pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize The size of the page (optional, default to 20)
         * @return APIlistNumberOrderRegulatoryRequirementsRequest
         */
        public APIlistNumberOrderRegulatoryRequirementsRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for listNumberOrderRegulatoryRequirements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listNumberOrderRegulatoryRequirementsCall(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize, _callback);
        }

        /**
         * Execute listNumberOrderRegulatoryRequirements request
         * @return ListNumberOrderRegulatoryRequirementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ListNumberOrderRegulatoryRequirementsResponse execute() throws ApiException {
            ApiResponse<ListNumberOrderRegulatoryRequirementsResponse> localVarResp = listNumberOrderRegulatoryRequirementsWithHttpInfo(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute listNumberOrderRegulatoryRequirements request with HTTP info returned
         * @return ApiResponse&lt;ListNumberOrderRegulatoryRequirementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListNumberOrderRegulatoryRequirementsResponse> executeWithHttpInfo() throws ApiException {
            return listNumberOrderRegulatoryRequirementsWithHttpInfo(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize);
        }

        /**
         * Execute listNumberOrderRegulatoryRequirements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListNumberOrderRegulatoryRequirementsResponse> _callback) throws ApiException {
            return listNumberOrderRegulatoryRequirementsAsync(filterRequirementId, filterFieldType, filterRequirementType, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List number order regulatory requirements
     * Gets a paginated list of number order regulatory requirements.
     * @return APIlistNumberOrderRegulatoryRequirementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistNumberOrderRegulatoryRequirementsRequest listNumberOrderRegulatoryRequirements() {
        return new APIlistNumberOrderRegulatoryRequirementsRequest();
    }
    private okhttp3.Call listPhoneNumberRegulatoryRequirementsCall(List<String> filterPhoneNumber, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone_number_regulatory_requirements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterPhoneNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[phone_number]", filterPhoneNumber));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPhoneNumberRegulatoryRequirementsValidateBeforeCall(List<String> filterPhoneNumber, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPhoneNumberRegulatoryRequirementsCall(filterPhoneNumber, pageNumber, pageSize, _callback);
        return localVarCall;

    }


    private ApiResponse<ListPhoneNumberRegulatoryRequirementsResponse> listPhoneNumberRegulatoryRequirementsWithHttpInfo(List<String> filterPhoneNumber, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPhoneNumberRegulatoryRequirementsValidateBeforeCall(filterPhoneNumber, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumberRegulatoryRequirementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPhoneNumberRegulatoryRequirementsAsync(List<String> filterPhoneNumber, Integer pageNumber, Integer pageSize, final ApiCallback<ListPhoneNumberRegulatoryRequirementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPhoneNumberRegulatoryRequirementsValidateBeforeCall(filterPhoneNumber, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumberRegulatoryRequirementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPhoneNumberRegulatoryRequirementsRequest {
        private List<String> filterPhoneNumber;
        private Integer pageNumber;
        private Integer pageSize;

        private APIlistPhoneNumberRegulatoryRequirementsRequest() {
        }

        /**
         * Set filterPhoneNumber
         * @param filterPhoneNumber The list of phone numbers to retrieve regulatory requirements for. (optional)
         * @return APIlistPhoneNumberRegulatoryRequirementsRequest
         */
        public APIlistPhoneNumberRegulatoryRequirementsRequest filterPhoneNumber(List<String> filterPhoneNumber) {
            this.filterPhoneNumber = filterPhoneNumber;
            return this;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number to load (optional, default to 1)
         * @return APIlistPhoneNumberRegulatoryRequirementsRequest
         */
        public APIlistPhoneNumberRegulatoryRequirementsRequest pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize The size of the page (optional, default to 20)
         * @return APIlistPhoneNumberRegulatoryRequirementsRequest
         */
        public APIlistPhoneNumberRegulatoryRequirementsRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for listPhoneNumberRegulatoryRequirements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPhoneNumberRegulatoryRequirementsCall(filterPhoneNumber, pageNumber, pageSize, _callback);
        }

        /**
         * Execute listPhoneNumberRegulatoryRequirements request
         * @return ListPhoneNumberRegulatoryRequirementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ListPhoneNumberRegulatoryRequirementsResponse execute() throws ApiException {
            ApiResponse<ListPhoneNumberRegulatoryRequirementsResponse> localVarResp = listPhoneNumberRegulatoryRequirementsWithHttpInfo(filterPhoneNumber, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute listPhoneNumberRegulatoryRequirements request with HTTP info returned
         * @return ApiResponse&lt;ListPhoneNumberRegulatoryRequirementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListPhoneNumberRegulatoryRequirementsResponse> executeWithHttpInfo() throws ApiException {
            return listPhoneNumberRegulatoryRequirementsWithHttpInfo(filterPhoneNumber, pageNumber, pageSize);
        }

        /**
         * Execute listPhoneNumberRegulatoryRequirements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListPhoneNumberRegulatoryRequirementsResponse> _callback) throws ApiException {
            return listPhoneNumberRegulatoryRequirementsAsync(filterPhoneNumber, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List regulatory requirements per number
     * Gets a paginated list of phone number regulatory requirements.
     * @return APIlistPhoneNumberRegulatoryRequirementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPhoneNumberRegulatoryRequirementsRequest listPhoneNumberRegulatoryRequirements() {
        return new APIlistPhoneNumberRegulatoryRequirementsRequest();
    }
    private okhttp3.Call retrieveNumberOrderRegulatoryRequirementCall(String requirementId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regulatory_requirements/{requirement_id}"
            .replaceAll("\\{" + "requirement_id" + "\\}", localVarApiClient.escapeString(requirementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveNumberOrderRegulatoryRequirementValidateBeforeCall(String requirementId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requirementId' is set
        if (requirementId == null) {
            throw new ApiException("Missing the required parameter 'requirementId' when calling retrieveNumberOrderRegulatoryRequirement(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveNumberOrderRegulatoryRequirementCall(requirementId, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderRegulatoryRequirementResponse> retrieveNumberOrderRegulatoryRequirementWithHttpInfo(String requirementId) throws ApiException {
        okhttp3.Call localVarCall = retrieveNumberOrderRegulatoryRequirementValidateBeforeCall(requirementId, null);
        Type localVarReturnType = new TypeToken<NumberOrderRegulatoryRequirementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveNumberOrderRegulatoryRequirementAsync(String requirementId, final ApiCallback<NumberOrderRegulatoryRequirementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveNumberOrderRegulatoryRequirementValidateBeforeCall(requirementId, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderRegulatoryRequirementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIretrieveNumberOrderRegulatoryRequirementRequest {
        private final String requirementId;

        private APIretrieveNumberOrderRegulatoryRequirementRequest(String requirementId) {
            this.requirementId = requirementId;
        }

        /**
         * Build call for retrieveNumberOrderRegulatoryRequirement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveNumberOrderRegulatoryRequirementCall(requirementId, _callback);
        }

        /**
         * Execute retrieveNumberOrderRegulatoryRequirement request
         * @return NumberOrderRegulatoryRequirementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderRegulatoryRequirementResponse execute() throws ApiException {
            ApiResponse<NumberOrderRegulatoryRequirementResponse> localVarResp = retrieveNumberOrderRegulatoryRequirementWithHttpInfo(requirementId);
            return localVarResp.getData();
        }

        /**
         * Execute retrieveNumberOrderRegulatoryRequirement request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderRegulatoryRequirementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderRegulatoryRequirementResponse> executeWithHttpInfo() throws ApiException {
            return retrieveNumberOrderRegulatoryRequirementWithHttpInfo(requirementId);
        }

        /**
         * Execute retrieveNumberOrderRegulatoryRequirement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderRegulatoryRequirementResponse> _callback) throws ApiException {
            return retrieveNumberOrderRegulatoryRequirementAsync(requirementId, _callback);
        }
    }

    /**
     * Retrieve a number order regulatory requirement
     * Gets a single number order regulatory requirement.
     * @param requirementId The number order regulatory requirement ID. (required)
     * @return APIretrieveNumberOrderRegulatoryRequirementRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIretrieveNumberOrderRegulatoryRequirementRequest retrieveNumberOrderRegulatoryRequirement(String requirementId) {
        return new APIretrieveNumberOrderRegulatoryRequirementRequest(requirementId);
    }
}
