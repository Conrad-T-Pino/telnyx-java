/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberOrderRegulatoryRequirementsResponse;
import com.telnyx.sdk.models.ListPhoneNumberRegulatoryRequirementsResponse;
import com.telnyx.sdk.models.NumberOrderRegulatoryRequirementResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberOrderRegulatoryRequirementsApi {
    private ApiClient localVarApiClient;

    public NumberOrderRegulatoryRequirementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberOrderRegulatoryRequirementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listNumberOrderRegulatoryRequirements
     * @param filterRequirementId Filter number order regulatory requirements by &#x60;requirement_id&#x60;. (optional)
     * @param filterFieldType Filter number order regulatory requirements by &#x60;field_type&#x60;. (optional)
     * @param filterRequirementType Filter number order regulatory requirements by &#x60;requirement_type&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNumberOrderRegulatoryRequirementsCall(String filterRequirementId, String filterFieldType, String filterRequirementType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regulatory_requirements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterRequirementId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirement_id]", filterRequirementId));
        }

        if (filterFieldType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[field_type]", filterFieldType));
        }

        if (filterRequirementType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirement_type]", filterRequirementType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNumberOrderRegulatoryRequirementsValidateBeforeCall(String filterRequirementId, String filterFieldType, String filterRequirementType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listNumberOrderRegulatoryRequirementsCall(filterRequirementId, filterFieldType, filterRequirementType, _callback);
        return localVarCall;

    }

    /**
     * List number order regulatory requirements
     * Gets a paginated list of number order regulatory requirements.
     * @param filterRequirementId Filter number order regulatory requirements by &#x60;requirement_id&#x60;. (optional)
     * @param filterFieldType Filter number order regulatory requirements by &#x60;field_type&#x60;. (optional)
     * @param filterRequirementType Filter number order regulatory requirements by &#x60;requirement_type&#x60;. (optional)
     * @return ListNumberOrderRegulatoryRequirementsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListNumberOrderRegulatoryRequirementsResponse listNumberOrderRegulatoryRequirements(String filterRequirementId, String filterFieldType, String filterRequirementType) throws ApiException {
        ApiResponse<ListNumberOrderRegulatoryRequirementsResponse> localVarResp = listNumberOrderRegulatoryRequirementsWithHttpInfo(filterRequirementId, filterFieldType, filterRequirementType);
        return localVarResp.getData();
    }

    /**
     * List number order regulatory requirements
     * Gets a paginated list of number order regulatory requirements.
     * @param filterRequirementId Filter number order regulatory requirements by &#x60;requirement_id&#x60;. (optional)
     * @param filterFieldType Filter number order regulatory requirements by &#x60;field_type&#x60;. (optional)
     * @param filterRequirementType Filter number order regulatory requirements by &#x60;requirement_type&#x60;. (optional)
     * @return ApiResponse&lt;ListNumberOrderRegulatoryRequirementsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNumberOrderRegulatoryRequirementsResponse> listNumberOrderRegulatoryRequirementsWithHttpInfo(String filterRequirementId, String filterFieldType, String filterRequirementType) throws ApiException {
        okhttp3.Call localVarCall = listNumberOrderRegulatoryRequirementsValidateBeforeCall(filterRequirementId, filterFieldType, filterRequirementType, null);
        Type localVarReturnType = new TypeToken<ListNumberOrderRegulatoryRequirementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List number order regulatory requirements (asynchronously)
     * Gets a paginated list of number order regulatory requirements.
     * @param filterRequirementId Filter number order regulatory requirements by &#x60;requirement_id&#x60;. (optional)
     * @param filterFieldType Filter number order regulatory requirements by &#x60;field_type&#x60;. (optional)
     * @param filterRequirementType Filter number order regulatory requirements by &#x60;requirement_type&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number order regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNumberOrderRegulatoryRequirementsAsync(String filterRequirementId, String filterFieldType, String filterRequirementType, final ApiCallback<ListNumberOrderRegulatoryRequirementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNumberOrderRegulatoryRequirementsValidateBeforeCall(filterRequirementId, filterFieldType, filterRequirementType, _callback);
        Type localVarReturnType = new TypeToken<ListNumberOrderRegulatoryRequirementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPhoneNumberRegulatoryRequirements
     * @param filterPhoneNumber The list of phone numbers to retrieve regulatory requirements for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumberRegulatoryRequirementsCall(List<String> filterPhoneNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone_number_regulatory_requirements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterPhoneNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[phone_number]", filterPhoneNumber));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPhoneNumberRegulatoryRequirementsValidateBeforeCall(List<String> filterPhoneNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPhoneNumberRegulatoryRequirementsCall(filterPhoneNumber, _callback);
        return localVarCall;

    }

    /**
     * List regulatory requirements per number
     * Gets a paginated list of phone number regulatory requirements.
     * @param filterPhoneNumber The list of phone numbers to retrieve regulatory requirements for. (optional)
     * @return ListPhoneNumberRegulatoryRequirementsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListPhoneNumberRegulatoryRequirementsResponse listPhoneNumberRegulatoryRequirements(List<String> filterPhoneNumber) throws ApiException {
        ApiResponse<ListPhoneNumberRegulatoryRequirementsResponse> localVarResp = listPhoneNumberRegulatoryRequirementsWithHttpInfo(filterPhoneNumber);
        return localVarResp.getData();
    }

    /**
     * List regulatory requirements per number
     * Gets a paginated list of phone number regulatory requirements.
     * @param filterPhoneNumber The list of phone numbers to retrieve regulatory requirements for. (optional)
     * @return ApiResponse&lt;ListPhoneNumberRegulatoryRequirementsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPhoneNumberRegulatoryRequirementsResponse> listPhoneNumberRegulatoryRequirementsWithHttpInfo(List<String> filterPhoneNumber) throws ApiException {
        okhttp3.Call localVarCall = listPhoneNumberRegulatoryRequirementsValidateBeforeCall(filterPhoneNumber, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumberRegulatoryRequirementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List regulatory requirements per number (asynchronously)
     * Gets a paginated list of phone number regulatory requirements.
     * @param filterPhoneNumber The list of phone numbers to retrieve regulatory requirements for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of phone number regulatory requirements. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumberRegulatoryRequirementsAsync(List<String> filterPhoneNumber, final ApiCallback<ListPhoneNumberRegulatoryRequirementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPhoneNumberRegulatoryRequirementsValidateBeforeCall(filterPhoneNumber, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumberRegulatoryRequirementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveNumberOrderRegulatoryRequirement
     * @param requirementId The number order regulatory requirement ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveNumberOrderRegulatoryRequirementCall(String requirementId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regulatory_requirements/{requirement_id}"
            .replaceAll("\\{" + "requirement_id" + "\\}", localVarApiClient.escapeString(requirementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveNumberOrderRegulatoryRequirementValidateBeforeCall(String requirementId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requirementId' is set
        if (requirementId == null) {
            throw new ApiException("Missing the required parameter 'requirementId' when calling retrieveNumberOrderRegulatoryRequirement(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveNumberOrderRegulatoryRequirementCall(requirementId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a number order regulatory requirement
     * Gets a single number order regulatory requirement.
     * @param requirementId The number order regulatory requirement ID. (required)
     * @return NumberOrderRegulatoryRequirementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NumberOrderRegulatoryRequirementResponse retrieveNumberOrderRegulatoryRequirement(String requirementId) throws ApiException {
        ApiResponse<NumberOrderRegulatoryRequirementResponse> localVarResp = retrieveNumberOrderRegulatoryRequirementWithHttpInfo(requirementId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a number order regulatory requirement
     * Gets a single number order regulatory requirement.
     * @param requirementId The number order regulatory requirement ID. (required)
     * @return ApiResponse&lt;NumberOrderRegulatoryRequirementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumberOrderRegulatoryRequirementResponse> retrieveNumberOrderRegulatoryRequirementWithHttpInfo(String requirementId) throws ApiException {
        okhttp3.Call localVarCall = retrieveNumberOrderRegulatoryRequirementValidateBeforeCall(requirementId, null);
        Type localVarReturnType = new TypeToken<NumberOrderRegulatoryRequirementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a number order regulatory requirement (asynchronously)
     * Gets a single number order regulatory requirement.
     * @param requirementId The number order regulatory requirement ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order regulatory requirement. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveNumberOrderRegulatoryRequirementAsync(String requirementId, final ApiCallback<NumberOrderRegulatoryRequirementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveNumberOrderRegulatoryRequirementValidateBeforeCall(requirementId, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderRegulatoryRequirementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
