/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListAvailablePhoneNumbersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberSearchApi {
    private ApiClient localVarApiClient;

    public NumberSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listAvailablePhoneNumbersCall(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/available_phone_numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterPhoneNumberStartsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[phone_number][starts_with]", filterPhoneNumberStartsWith));
        }

        if (filterPhoneNumberEndsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[phone_number][ends_with]", filterPhoneNumberEndsWith));
        }

        if (filterPhoneNumberContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[phone_number][contains]", filterPhoneNumberContains));
        }

        if (filterLocality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[locality]", filterLocality));
        }

        if (filterAdministrativeArea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[administrative_area]", filterAdministrativeArea));
        }

        if (filterCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[country_code]", filterCountryCode));
        }

        if (filterNationalDestinationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[national_destination_code]", filterNationalDestinationCode));
        }

        if (filterRateCenter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rate_center]", filterRateCenter));
        }

        if (filterNumberType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[number_type]", filterNumberType));
        }

        if (filterFeatures != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[features]", filterFeatures));
        }

        if (filterLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[limit]", filterLimit));
        }

        if (filterBestEffort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[best_effort]", filterBestEffort));
        }

        if (filterQuickship != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[quickship]", filterQuickship));
        }

        if (filterReservable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[reservable]", filterReservable));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailablePhoneNumbersValidateBeforeCall(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAvailablePhoneNumbersCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, _callback);
        return localVarCall;

    }


    private ApiResponse<ListAvailablePhoneNumbersResponse> listAvailablePhoneNumbersWithHttpInfo(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable) throws ApiException {
        okhttp3.Call localVarCall = listAvailablePhoneNumbersValidateBeforeCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, null);
        Type localVarReturnType = new TypeToken<ListAvailablePhoneNumbersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailablePhoneNumbersAsync(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable, final ApiCallback<ListAvailablePhoneNumbersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailablePhoneNumbersValidateBeforeCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, _callback);
        Type localVarReturnType = new TypeToken<ListAvailablePhoneNumbersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAvailablePhoneNumbersRequest {
        private String filterPhoneNumberStartsWith;
        private String filterPhoneNumberEndsWith;
        private String filterPhoneNumberContains;
        private String filterLocality;
        private String filterAdministrativeArea;
        private String filterCountryCode;
        private String filterNationalDestinationCode;
        private String filterRateCenter;
        private String filterNumberType;
        private List<String> filterFeatures;
        private Integer filterLimit;
        private Boolean filterBestEffort;
        private Boolean filterQuickship;
        private Boolean filterReservable;

        private APIlistAvailablePhoneNumbersRequest() {
        }

        /**
         * Set filterPhoneNumberStartsWith
         * @param filterPhoneNumberStartsWith Filter numbers starting with a pattern (meant to be used after &#x60;national_destination_code&#x60; filter has been set). (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterPhoneNumberStartsWith(String filterPhoneNumberStartsWith) {
            this.filterPhoneNumberStartsWith = filterPhoneNumberStartsWith;
            return this;
        }

        /**
         * Set filterPhoneNumberEndsWith
         * @param filterPhoneNumberEndsWith Filter numbers ending with a pattern. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterPhoneNumberEndsWith(String filterPhoneNumberEndsWith) {
            this.filterPhoneNumberEndsWith = filterPhoneNumberEndsWith;
            return this;
        }

        /**
         * Set filterPhoneNumberContains
         * @param filterPhoneNumberContains Filter numbers containing a pattern. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterPhoneNumberContains(String filterPhoneNumberContains) {
            this.filterPhoneNumberContains = filterPhoneNumberContains;
            return this;
        }

        /**
         * Set filterLocality
         * @param filterLocality Filter phone numbers by city. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterLocality(String filterLocality) {
            this.filterLocality = filterLocality;
            return this;
        }

        /**
         * Set filterAdministrativeArea
         * @param filterAdministrativeArea Filter phone numbers by US state/CA province. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterAdministrativeArea(String filterAdministrativeArea) {
            this.filterAdministrativeArea = filterAdministrativeArea;
            return this;
        }

        /**
         * Set filterCountryCode
         * @param filterCountryCode Filter phone numbers by ISO alpha-2 country code. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterCountryCode(String filterCountryCode) {
            this.filterCountryCode = filterCountryCode;
            return this;
        }

        /**
         * Set filterNationalDestinationCode
         * @param filterNationalDestinationCode Filter by the national destination code of the number. This filter is only applicable to North American numbers. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterNationalDestinationCode(String filterNationalDestinationCode) {
            this.filterNationalDestinationCode = filterNationalDestinationCode;
            return this;
        }

        /**
         * Set filterRateCenter
         * @param filterRateCenter Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterRateCenter(String filterRateCenter) {
            this.filterRateCenter = filterRateCenter;
            return this;
        }

        /**
         * Set filterNumberType
         * @param filterNumberType Filter phone numbers by number type. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterNumberType(String filterNumberType) {
            this.filterNumberType = filterNumberType;
            return this;
        }

        /**
         * Set filterFeatures
         * @param filterFeatures Filter if the phone number should be used for voice, fax, mms, sms, emergency. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterFeatures(List<String> filterFeatures) {
            this.filterFeatures = filterFeatures;
            return this;
        }

        /**
         * Set filterLimit
         * @param filterLimit Limits the number of results. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterLimit(Integer filterLimit) {
            this.filterLimit = filterLimit;
            return this;
        }

        /**
         * Set filterBestEffort
         * @param filterBestEffort Filter to determine if best effort results should be included. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterBestEffort(Boolean filterBestEffort) {
            this.filterBestEffort = filterBestEffort;
            return this;
        }

        /**
         * Set filterQuickship
         * @param filterQuickship Filter to exclude phone numbers that need additional time after to purchase to receive phone calls. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterQuickship(Boolean filterQuickship) {
            this.filterQuickship = filterQuickship;
            return this;
        }

        /**
         * Set filterReservable
         * @param filterReservable Filter to exclude phone numbers that cannot be reserved before purchase. (optional)
         * @return APIlistAvailablePhoneNumbersRequest
         */
        public APIlistAvailablePhoneNumbersRequest filterReservable(Boolean filterReservable) {
            this.filterReservable = filterReservable;
            return this;
        }

        /**
         * Build call for listAvailablePhoneNumbers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of available phone numbers. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailablePhoneNumbersCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, _callback);
        }

        /**
         * Execute listAvailablePhoneNumbers request
         * @return ListAvailablePhoneNumbersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of available phone numbers. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ListAvailablePhoneNumbersResponse execute() throws ApiException {
            ApiResponse<ListAvailablePhoneNumbersResponse> localVarResp = listAvailablePhoneNumbersWithHttpInfo(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable);
            return localVarResp.getData();
        }

        /**
         * Execute listAvailablePhoneNumbers request with HTTP info returned
         * @return ApiResponse&lt;ListAvailablePhoneNumbersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of available phone numbers. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAvailablePhoneNumbersResponse> executeWithHttpInfo() throws ApiException {
            return listAvailablePhoneNumbersWithHttpInfo(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable);
        }

        /**
         * Execute listAvailablePhoneNumbers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of available phone numbers. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAvailablePhoneNumbersResponse> _callback) throws ApiException {
            return listAvailablePhoneNumbersAsync(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, _callback);
        }
    }

    /**
     * List available phone numbers
     * 
     * @return APIlistAvailablePhoneNumbersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of available phone numbers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAvailablePhoneNumbersRequest listAvailablePhoneNumbers() {
        return new APIlistAvailablePhoneNumbersRequest();
    }
}
