/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.AnswerRequest;
import com.telnyx.sdk.models.BridgeRequest;
import com.telnyx.sdk.models.CallControlCommandResponse;
import com.telnyx.sdk.models.CallRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.GatherUsingAudioRequest;
import com.telnyx.sdk.models.GatherUsingSpeakRequest;
import com.telnyx.sdk.models.HangupRequest;
import com.telnyx.sdk.models.PlayAudioUrlRequest;
import com.telnyx.sdk.models.PlaybackStopRequest;
import com.telnyx.sdk.models.RejectRequest;
import com.telnyx.sdk.models.RetrieveCallStatusResponse;
import com.telnyx.sdk.models.SendDTMFRequest;
import com.telnyx.sdk.models.SpeakRequest;
import com.telnyx.sdk.models.StartForkingRequest;
import com.telnyx.sdk.models.StartRecordingRequest;
import com.telnyx.sdk.models.StopForkingRequest;
import com.telnyx.sdk.models.StopGatherRequest;
import com.telnyx.sdk.models.StopRecordingRequest;
import com.telnyx.sdk.models.TransferCallRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallCommandsApi {
    private ApiClient localVarApiClient;

    public CallCommandsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallCommandsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for callAnswer
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param answerRequest Answer call request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callAnswerCall(String callControlId, AnswerRequest answerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = answerRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/answer"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callAnswerValidateBeforeCall(String callControlId, AnswerRequest answerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callAnswer(Async)");
        }
        
        // verify the required parameter 'answerRequest' is set
        if (answerRequest == null) {
            throw new ApiException("Missing the required parameter 'answerRequest' when calling callAnswer(Async)");
        }
        

        okhttp3.Call localVarCall = callAnswerCall(callControlId, answerRequest, _callback);
        return localVarCall;

    }

    /**
     * Answer call
     * Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.  **Expected Webhooks:**  - &#x60;call.answered&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param answerRequest Answer call request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callAnswer(String callControlId, AnswerRequest answerRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callAnswerWithHttpInfo(callControlId, answerRequest);
        return localVarResp.getData();
    }

    /**
     * Answer call
     * Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.  **Expected Webhooks:**  - &#x60;call.answered&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param answerRequest Answer call request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callAnswerWithHttpInfo(String callControlId, AnswerRequest answerRequest) throws ApiException {
        okhttp3.Call localVarCall = callAnswerValidateBeforeCall(callControlId, answerRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Answer call (asynchronously)
     * Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.  **Expected Webhooks:**  - &#x60;call.answered&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param answerRequest Answer call request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callAnswerAsync(String callControlId, AnswerRequest answerRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callAnswerValidateBeforeCall(callControlId, answerRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callBridge
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param bridgeRequest Bridge call request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callBridgeCall(String callControlId, BridgeRequest bridgeRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bridgeRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/bridge"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callBridgeValidateBeforeCall(String callControlId, BridgeRequest bridgeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callBridge(Async)");
        }
        
        // verify the required parameter 'bridgeRequest' is set
        if (bridgeRequest == null) {
            throw new ApiException("Missing the required parameter 'bridgeRequest' when calling callBridge(Async)");
        }
        

        okhttp3.Call localVarCall = callBridgeCall(callControlId, bridgeRequest, _callback);
        return localVarCall;

    }

    /**
     * Bridge calls
     * Bridge two call control calls.  **Expected Webhooks:**  - &#x60;call.bridged&#x60; for Leg A - &#x60;call.bridged&#x60; for Leg B 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param bridgeRequest Bridge call request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callBridge(String callControlId, BridgeRequest bridgeRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callBridgeWithHttpInfo(callControlId, bridgeRequest);
        return localVarResp.getData();
    }

    /**
     * Bridge calls
     * Bridge two call control calls.  **Expected Webhooks:**  - &#x60;call.bridged&#x60; for Leg A - &#x60;call.bridged&#x60; for Leg B 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param bridgeRequest Bridge call request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callBridgeWithHttpInfo(String callControlId, BridgeRequest bridgeRequest) throws ApiException {
        okhttp3.Call localVarCall = callBridgeValidateBeforeCall(callControlId, bridgeRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bridge calls (asynchronously)
     * Bridge two call control calls.  **Expected Webhooks:**  - &#x60;call.bridged&#x60; for Leg A - &#x60;call.bridged&#x60; for Leg B 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param bridgeRequest Bridge call request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callBridgeAsync(String callControlId, BridgeRequest bridgeRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callBridgeValidateBeforeCall(callControlId, bridgeRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callDial
     * @param callRequest Call request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a call status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callDialCall(CallRequest callRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = callRequest;

        // create path and map variables
        String localVarPath = "/calls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callDialValidateBeforeCall(CallRequest callRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callRequest' is set
        if (callRequest == null) {
            throw new ApiException("Missing the required parameter 'callRequest' when calling callDial(Async)");
        }
        

        okhttp3.Call localVarCall = callDialCall(callRequest, _callback);
        return localVarCall;

    }

    /**
     * Dial
     * Dial a number or SIP URI from a given connection. A successful response will include a &#x60;call_leg_id&#x60; which can be used to correlate the command with subsequent webhooks.  **Expected Webhooks:**  - &#x60;call.initiated&#x60; - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     * @param callRequest Call request (required)
     * @return RetrieveCallStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a call status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveCallStatusResponse callDial(CallRequest callRequest) throws ApiException {
        ApiResponse<RetrieveCallStatusResponse> localVarResp = callDialWithHttpInfo(callRequest);
        return localVarResp.getData();
    }

    /**
     * Dial
     * Dial a number or SIP URI from a given connection. A successful response will include a &#x60;call_leg_id&#x60; which can be used to correlate the command with subsequent webhooks.  **Expected Webhooks:**  - &#x60;call.initiated&#x60; - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     * @param callRequest Call request (required)
     * @return ApiResponse&lt;RetrieveCallStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a call status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveCallStatusResponse> callDialWithHttpInfo(CallRequest callRequest) throws ApiException {
        okhttp3.Call localVarCall = callDialValidateBeforeCall(callRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveCallStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dial (asynchronously)
     * Dial a number or SIP URI from a given connection. A successful response will include a &#x60;call_leg_id&#x60; which can be used to correlate the command with subsequent webhooks.  **Expected Webhooks:**  - &#x60;call.initiated&#x60; - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     * @param callRequest Call request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a call status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callDialAsync(CallRequest callRequest, final ApiCallback<RetrieveCallStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callDialValidateBeforeCall(callRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveCallStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callForkStart
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startForkingRequest Fork media request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callForkStartCall(String callControlId, StartForkingRequest startForkingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = startForkingRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/fork_start"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callForkStartValidateBeforeCall(String callControlId, StartForkingRequest startForkingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callForkStart(Async)");
        }
        
        // verify the required parameter 'startForkingRequest' is set
        if (startForkingRequest == null) {
            throw new ApiException("Missing the required parameter 'startForkingRequest' when calling callForkStart(Async)");
        }
        

        okhttp3.Call localVarCall = callForkStartCall(callControlId, startForkingRequest, _callback);
        return localVarCall;

    }

    /**
     * Forking start
     * Call forking allows you to stream the media from a call to a specific target in realtime.  This stream can be used to enable realtime audio analysis to support a  variety of use cases, including fraud detection, or the creation of AI-generated audio responses.  Requests must specify either the &#x60;target&#x60; attribute or the &#x60;rx&#x60; and &#x60;tx&#x60; attributes.  **Expected Webhooks:**  - &#x60;call.fork.started&#x60; - &#x60;call.fork.stopped&#x60;  **Simple Telnyx RTP Encapsulation Protocol (STREP)**  *Note: This header/encapsulation is not used when the &#x60;rx&#x60; and &#x60;tx&#x60; parameters have been specified; it only applies when media is forked using the &#x60;target&#x60; attribute.*  If the destination for forked media is specified using the \&quot;target\&quot; attribute, the RTP will be encapsulated in an extra Telnyx protocol, which adds a 24 byte header to the RTP payload in each packet. The STREP header includes the Call Control &#x60;call_leg_id&#x60; for stream identification, along with bits that represent the direction (inbound or outbound) of the media. This 24-byte header sits between the UDP header and the RTP header.  The STREP header makes it possible to fork RTP for multiple calls (or two RTP streams for the same call) to the same IP:port, where the streams can be demultiplexed by your application using the information in the header. Of course, it&#39;s still possible to ignore this header completely, for example, if sending forked media for different calls to different ports or IP addresses. In this case, simply strip 24 bytes (or use the second byte to find the header length) from the received UDP payload to get the RTP (RTP header and payload).  &#x60;&#x60;&#x60; STREP Specification    0                   1                   2                   3   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |1 1|Version|L|D|    HeaderLen  |  reserved (2 bytes)           |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |       reserved (4 bytes, for UDP ports or anything else)      |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |               The call_leg_id                                 |  |                   from Call Control                           |  |                       (128 bits / 16 bytes)                   |  |                           (this is binary data)               |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   11    Static bits 11, always set to 11 to easily distinguish forked media    from RTP (10) and T.38 media (usually 00) and SIP (which begins    with a capital letter, so begins with bits 01). This is a magic number.   Version    Four bits to indicate the version number of the protocol, starting at 0001.   L    One bit to represent the leg of the call (A or B).    0 represents the A (first) leg of the call.    1 represents the B (second) leg of the call.   D    One bit to represent the direction of this RTP stream.    0 represents media received by Telnyx.    1 represents media transmitted by Telnyx.   HeaderLen (1 byte)    The length of the header in bytes.    Note that this value does not include the length of the payload. The total    size of the RTP can be calculated by subtracting the HeaderLen from the UDP    length (minus 8 for the UDP header).    In version 1, this value will always be 24.   Reserved (6 bytes)    Reserved for future use and to make sure that the header is a multiple of 32 bits   Call Leg ID    A 128-bit identifier for the call leg.    This is the call_leg_id from Call Control. &#x60;&#x60;&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startForkingRequest Fork media request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callForkStart(String callControlId, StartForkingRequest startForkingRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callForkStartWithHttpInfo(callControlId, startForkingRequest);
        return localVarResp.getData();
    }

    /**
     * Forking start
     * Call forking allows you to stream the media from a call to a specific target in realtime.  This stream can be used to enable realtime audio analysis to support a  variety of use cases, including fraud detection, or the creation of AI-generated audio responses.  Requests must specify either the &#x60;target&#x60; attribute or the &#x60;rx&#x60; and &#x60;tx&#x60; attributes.  **Expected Webhooks:**  - &#x60;call.fork.started&#x60; - &#x60;call.fork.stopped&#x60;  **Simple Telnyx RTP Encapsulation Protocol (STREP)**  *Note: This header/encapsulation is not used when the &#x60;rx&#x60; and &#x60;tx&#x60; parameters have been specified; it only applies when media is forked using the &#x60;target&#x60; attribute.*  If the destination for forked media is specified using the \&quot;target\&quot; attribute, the RTP will be encapsulated in an extra Telnyx protocol, which adds a 24 byte header to the RTP payload in each packet. The STREP header includes the Call Control &#x60;call_leg_id&#x60; for stream identification, along with bits that represent the direction (inbound or outbound) of the media. This 24-byte header sits between the UDP header and the RTP header.  The STREP header makes it possible to fork RTP for multiple calls (or two RTP streams for the same call) to the same IP:port, where the streams can be demultiplexed by your application using the information in the header. Of course, it&#39;s still possible to ignore this header completely, for example, if sending forked media for different calls to different ports or IP addresses. In this case, simply strip 24 bytes (or use the second byte to find the header length) from the received UDP payload to get the RTP (RTP header and payload).  &#x60;&#x60;&#x60; STREP Specification    0                   1                   2                   3   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |1 1|Version|L|D|    HeaderLen  |  reserved (2 bytes)           |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |       reserved (4 bytes, for UDP ports or anything else)      |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |               The call_leg_id                                 |  |                   from Call Control                           |  |                       (128 bits / 16 bytes)                   |  |                           (this is binary data)               |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   11    Static bits 11, always set to 11 to easily distinguish forked media    from RTP (10) and T.38 media (usually 00) and SIP (which begins    with a capital letter, so begins with bits 01). This is a magic number.   Version    Four bits to indicate the version number of the protocol, starting at 0001.   L    One bit to represent the leg of the call (A or B).    0 represents the A (first) leg of the call.    1 represents the B (second) leg of the call.   D    One bit to represent the direction of this RTP stream.    0 represents media received by Telnyx.    1 represents media transmitted by Telnyx.   HeaderLen (1 byte)    The length of the header in bytes.    Note that this value does not include the length of the payload. The total    size of the RTP can be calculated by subtracting the HeaderLen from the UDP    length (minus 8 for the UDP header).    In version 1, this value will always be 24.   Reserved (6 bytes)    Reserved for future use and to make sure that the header is a multiple of 32 bits   Call Leg ID    A 128-bit identifier for the call leg.    This is the call_leg_id from Call Control. &#x60;&#x60;&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startForkingRequest Fork media request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callForkStartWithHttpInfo(String callControlId, StartForkingRequest startForkingRequest) throws ApiException {
        okhttp3.Call localVarCall = callForkStartValidateBeforeCall(callControlId, startForkingRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forking start (asynchronously)
     * Call forking allows you to stream the media from a call to a specific target in realtime.  This stream can be used to enable realtime audio analysis to support a  variety of use cases, including fraud detection, or the creation of AI-generated audio responses.  Requests must specify either the &#x60;target&#x60; attribute or the &#x60;rx&#x60; and &#x60;tx&#x60; attributes.  **Expected Webhooks:**  - &#x60;call.fork.started&#x60; - &#x60;call.fork.stopped&#x60;  **Simple Telnyx RTP Encapsulation Protocol (STREP)**  *Note: This header/encapsulation is not used when the &#x60;rx&#x60; and &#x60;tx&#x60; parameters have been specified; it only applies when media is forked using the &#x60;target&#x60; attribute.*  If the destination for forked media is specified using the \&quot;target\&quot; attribute, the RTP will be encapsulated in an extra Telnyx protocol, which adds a 24 byte header to the RTP payload in each packet. The STREP header includes the Call Control &#x60;call_leg_id&#x60; for stream identification, along with bits that represent the direction (inbound or outbound) of the media. This 24-byte header sits between the UDP header and the RTP header.  The STREP header makes it possible to fork RTP for multiple calls (or two RTP streams for the same call) to the same IP:port, where the streams can be demultiplexed by your application using the information in the header. Of course, it&#39;s still possible to ignore this header completely, for example, if sending forked media for different calls to different ports or IP addresses. In this case, simply strip 24 bytes (or use the second byte to find the header length) from the received UDP payload to get the RTP (RTP header and payload).  &#x60;&#x60;&#x60; STREP Specification    0                   1                   2                   3   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |1 1|Version|L|D|    HeaderLen  |  reserved (2 bytes)           |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |       reserved (4 bytes, for UDP ports or anything else)      |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |               The call_leg_id                                 |  |                   from Call Control                           |  |                       (128 bits / 16 bytes)                   |  |                           (this is binary data)               |  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   11    Static bits 11, always set to 11 to easily distinguish forked media    from RTP (10) and T.38 media (usually 00) and SIP (which begins    with a capital letter, so begins with bits 01). This is a magic number.   Version    Four bits to indicate the version number of the protocol, starting at 0001.   L    One bit to represent the leg of the call (A or B).    0 represents the A (first) leg of the call.    1 represents the B (second) leg of the call.   D    One bit to represent the direction of this RTP stream.    0 represents media received by Telnyx.    1 represents media transmitted by Telnyx.   HeaderLen (1 byte)    The length of the header in bytes.    Note that this value does not include the length of the payload. The total    size of the RTP can be calculated by subtracting the HeaderLen from the UDP    length (minus 8 for the UDP header).    In version 1, this value will always be 24.   Reserved (6 bytes)    Reserved for future use and to make sure that the header is a multiple of 32 bits   Call Leg ID    A 128-bit identifier for the call leg.    This is the call_leg_id from Call Control. &#x60;&#x60;&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startForkingRequest Fork media request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callForkStartAsync(String callControlId, StartForkingRequest startForkingRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callForkStartValidateBeforeCall(callControlId, startForkingRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callForkStop
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopForkingRequest Stop forking media request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callForkStopCall(String callControlId, StopForkingRequest stopForkingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stopForkingRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/fork_stop"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callForkStopValidateBeforeCall(String callControlId, StopForkingRequest stopForkingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callForkStop(Async)");
        }
        
        // verify the required parameter 'stopForkingRequest' is set
        if (stopForkingRequest == null) {
            throw new ApiException("Missing the required parameter 'stopForkingRequest' when calling callForkStop(Async)");
        }
        

        okhttp3.Call localVarCall = callForkStopCall(callControlId, stopForkingRequest, _callback);
        return localVarCall;

    }

    /**
     * Forking stop
     * Stop forking a call.  **Expected Webhooks:**  - &#x60;call.fork.stopped&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopForkingRequest Stop forking media request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callForkStop(String callControlId, StopForkingRequest stopForkingRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callForkStopWithHttpInfo(callControlId, stopForkingRequest);
        return localVarResp.getData();
    }

    /**
     * Forking stop
     * Stop forking a call.  **Expected Webhooks:**  - &#x60;call.fork.stopped&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopForkingRequest Stop forking media request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callForkStopWithHttpInfo(String callControlId, StopForkingRequest stopForkingRequest) throws ApiException {
        okhttp3.Call localVarCall = callForkStopValidateBeforeCall(callControlId, stopForkingRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forking stop (asynchronously)
     * Stop forking a call.  **Expected Webhooks:**  - &#x60;call.fork.stopped&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopForkingRequest Stop forking media request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callForkStopAsync(String callControlId, StopForkingRequest stopForkingRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callForkStopValidateBeforeCall(callControlId, stopForkingRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callGatherStop
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopGatherRequest Stop current gather (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callGatherStopCall(String callControlId, StopGatherRequest stopGatherRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stopGatherRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/gather_stop"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callGatherStopValidateBeforeCall(String callControlId, StopGatherRequest stopGatherRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callGatherStop(Async)");
        }
        
        // verify the required parameter 'stopGatherRequest' is set
        if (stopGatherRequest == null) {
            throw new ApiException("Missing the required parameter 'stopGatherRequest' when calling callGatherStop(Async)");
        }
        

        okhttp3.Call localVarCall = callGatherStopCall(callControlId, stopGatherRequest, _callback);
        return localVarCall;

    }

    /**
     * Gather stop
     * Stop current gather.  **Expected Webhooks:**  - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopGatherRequest Stop current gather (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callGatherStop(String callControlId, StopGatherRequest stopGatherRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callGatherStopWithHttpInfo(callControlId, stopGatherRequest);
        return localVarResp.getData();
    }

    /**
     * Gather stop
     * Stop current gather.  **Expected Webhooks:**  - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopGatherRequest Stop current gather (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callGatherStopWithHttpInfo(String callControlId, StopGatherRequest stopGatherRequest) throws ApiException {
        okhttp3.Call localVarCall = callGatherStopValidateBeforeCall(callControlId, stopGatherRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gather stop (asynchronously)
     * Stop current gather.  **Expected Webhooks:**  - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopGatherRequest Stop current gather (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callGatherStopAsync(String callControlId, StopGatherRequest stopGatherRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callGatherStopValidateBeforeCall(callControlId, stopGatherRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callGatherUsingAudio
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingAudioRequest Gather using audio request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callGatherUsingAudioCall(String callControlId, GatherUsingAudioRequest gatherUsingAudioRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = gatherUsingAudioRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/gather_using_audio"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callGatherUsingAudioValidateBeforeCall(String callControlId, GatherUsingAudioRequest gatherUsingAudioRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callGatherUsingAudio(Async)");
        }
        
        // verify the required parameter 'gatherUsingAudioRequest' is set
        if (gatherUsingAudioRequest == null) {
            throw new ApiException("Missing the required parameter 'gatherUsingAudioRequest' when calling callGatherUsingAudio(Async)");
        }
        

        okhttp3.Call localVarCall = callGatherUsingAudioCall(callControlId, gatherUsingAudioRequest, _callback);
        return localVarCall;

    }

    /**
     * Gather using audio
     * Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_audio_url&#39;, which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the &#x60;gather_using_audio&#x60; command.  **Expected Webhooks:**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingAudioRequest Gather using audio request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callGatherUsingAudio(String callControlId, GatherUsingAudioRequest gatherUsingAudioRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callGatherUsingAudioWithHttpInfo(callControlId, gatherUsingAudioRequest);
        return localVarResp.getData();
    }

    /**
     * Gather using audio
     * Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_audio_url&#39;, which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the &#x60;gather_using_audio&#x60; command.  **Expected Webhooks:**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingAudioRequest Gather using audio request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callGatherUsingAudioWithHttpInfo(String callControlId, GatherUsingAudioRequest gatherUsingAudioRequest) throws ApiException {
        okhttp3.Call localVarCall = callGatherUsingAudioValidateBeforeCall(callControlId, gatherUsingAudioRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gather using audio (asynchronously)
     * Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_audio_url&#39;, which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the &#x60;gather_using_audio&#x60; command.  **Expected Webhooks:**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingAudioRequest Gather using audio request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callGatherUsingAudioAsync(String callControlId, GatherUsingAudioRequest gatherUsingAudioRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callGatherUsingAudioValidateBeforeCall(callControlId, gatherUsingAudioRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callGatherUsingSpeak
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingSpeakRequest Gather using speak request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callGatherUsingSpeakCall(String callControlId, GatherUsingSpeakRequest gatherUsingSpeakRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = gatherUsingSpeakRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/gather_using_speak"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callGatherUsingSpeakValidateBeforeCall(String callControlId, GatherUsingSpeakRequest gatherUsingSpeakRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callGatherUsingSpeak(Async)");
        }
        
        // verify the required parameter 'gatherUsingSpeakRequest' is set
        if (gatherUsingSpeakRequest == null) {
            throw new ApiException("Missing the required parameter 'gatherUsingSpeakRequest' when calling callGatherUsingSpeak(Async)");
        }
        

        okhttp3.Call localVarCall = callGatherUsingSpeakCall(callControlId, gatherUsingSpeakRequest, _callback);
        return localVarCall;

    }

    /**
     * Gather using speak
     * Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_payload&#39;, which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the &#x60;gather_using_speak&#x60; command.  **Expected Webhooks:**  - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingSpeakRequest Gather using speak request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callGatherUsingSpeak(String callControlId, GatherUsingSpeakRequest gatherUsingSpeakRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callGatherUsingSpeakWithHttpInfo(callControlId, gatherUsingSpeakRequest);
        return localVarResp.getData();
    }

    /**
     * Gather using speak
     * Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_payload&#39;, which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the &#x60;gather_using_speak&#x60; command.  **Expected Webhooks:**  - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingSpeakRequest Gather using speak request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callGatherUsingSpeakWithHttpInfo(String callControlId, GatherUsingSpeakRequest gatherUsingSpeakRequest) throws ApiException {
        okhttp3.Call localVarCall = callGatherUsingSpeakValidateBeforeCall(callControlId, gatherUsingSpeakRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gather using speak (asynchronously)
     * Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_payload&#39;, which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the &#x60;gather_using_speak&#x60; command.  **Expected Webhooks:**  - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param gatherUsingSpeakRequest Gather using speak request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callGatherUsingSpeakAsync(String callControlId, GatherUsingSpeakRequest gatherUsingSpeakRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callGatherUsingSpeakValidateBeforeCall(callControlId, gatherUsingSpeakRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callHangup
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param hangupRequest Hangup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callHangupCall(String callControlId, HangupRequest hangupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = hangupRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/hangup"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callHangupValidateBeforeCall(String callControlId, HangupRequest hangupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callHangup(Async)");
        }
        
        // verify the required parameter 'hangupRequest' is set
        if (hangupRequest == null) {
            throw new ApiException("Missing the required parameter 'hangupRequest' when calling callHangup(Async)");
        }
        

        okhttp3.Call localVarCall = callHangupCall(callControlId, hangupRequest, _callback);
        return localVarCall;

    }

    /**
     * Hangup call
     * Hang up the call.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param hangupRequest Hangup request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callHangup(String callControlId, HangupRequest hangupRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callHangupWithHttpInfo(callControlId, hangupRequest);
        return localVarResp.getData();
    }

    /**
     * Hangup call
     * Hang up the call.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param hangupRequest Hangup request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callHangupWithHttpInfo(String callControlId, HangupRequest hangupRequest) throws ApiException {
        okhttp3.Call localVarCall = callHangupValidateBeforeCall(callControlId, hangupRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hangup call (asynchronously)
     * Hang up the call.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param hangupRequest Hangup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callHangupAsync(String callControlId, HangupRequest hangupRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callHangupValidateBeforeCall(callControlId, hangupRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callPlaybackStart
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playAudioUrlRequest Play audio URL request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callPlaybackStartCall(String callControlId, PlayAudioUrlRequest playAudioUrlRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = playAudioUrlRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/playback_start"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callPlaybackStartValidateBeforeCall(String callControlId, PlayAudioUrlRequest playAudioUrlRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callPlaybackStart(Async)");
        }
        
        // verify the required parameter 'playAudioUrlRequest' is set
        if (playAudioUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'playAudioUrlRequest' when calling callPlaybackStart(Async)");
        }
        

        okhttp3.Call localVarCall = callPlaybackStartCall(callControlId, playAudioUrlRequest, _callback);
        return localVarCall;

    }

    /**
     * Play audio URL
     * Play an audio file on the call. If multiple play audio commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  *Notes:*  - When &#x60;overlay&#x60; is enabled, &#x60;loop&#x60; is limited to 1, and &#x60;target_legs&#x60; is limited to &#x60;self&#x60;. - A customer cannot Play Audio with &#x60;overlay&#x3D;true&#x60; unless there is a Play Audio with &#x60;overlay&#x3D;false&#x60; actively playing.  **Expected Webhooks:**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playAudioUrlRequest Play audio URL request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callPlaybackStart(String callControlId, PlayAudioUrlRequest playAudioUrlRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callPlaybackStartWithHttpInfo(callControlId, playAudioUrlRequest);
        return localVarResp.getData();
    }

    /**
     * Play audio URL
     * Play an audio file on the call. If multiple play audio commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  *Notes:*  - When &#x60;overlay&#x60; is enabled, &#x60;loop&#x60; is limited to 1, and &#x60;target_legs&#x60; is limited to &#x60;self&#x60;. - A customer cannot Play Audio with &#x60;overlay&#x3D;true&#x60; unless there is a Play Audio with &#x60;overlay&#x3D;false&#x60; actively playing.  **Expected Webhooks:**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playAudioUrlRequest Play audio URL request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callPlaybackStartWithHttpInfo(String callControlId, PlayAudioUrlRequest playAudioUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = callPlaybackStartValidateBeforeCall(callControlId, playAudioUrlRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Play audio URL (asynchronously)
     * Play an audio file on the call. If multiple play audio commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  *Notes:*  - When &#x60;overlay&#x60; is enabled, &#x60;loop&#x60; is limited to 1, and &#x60;target_legs&#x60; is limited to &#x60;self&#x60;. - A customer cannot Play Audio with &#x60;overlay&#x3D;true&#x60; unless there is a Play Audio with &#x60;overlay&#x3D;false&#x60; actively playing.  **Expected Webhooks:**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playAudioUrlRequest Play audio URL request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callPlaybackStartAsync(String callControlId, PlayAudioUrlRequest playAudioUrlRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callPlaybackStartValidateBeforeCall(callControlId, playAudioUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callPlaybackStop
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playbackStopRequest Stop audio playback request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callPlaybackStopCall(String callControlId, PlaybackStopRequest playbackStopRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = playbackStopRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/playback_stop"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callPlaybackStopValidateBeforeCall(String callControlId, PlaybackStopRequest playbackStopRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callPlaybackStop(Async)");
        }
        
        // verify the required parameter 'playbackStopRequest' is set
        if (playbackStopRequest == null) {
            throw new ApiException("Missing the required parameter 'playbackStopRequest' when calling callPlaybackStop(Async)");
        }
        

        okhttp3.Call localVarCall = callPlaybackStopCall(callControlId, playbackStopRequest, _callback);
        return localVarCall;

    }

    /**
     * Stop audio playback
     * Stop audio being played on the call.  **Expected Webhooks:**  - &#x60;call.playback.ended&#x60; or &#x60;call.speak.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playbackStopRequest Stop audio playback request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callPlaybackStop(String callControlId, PlaybackStopRequest playbackStopRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callPlaybackStopWithHttpInfo(callControlId, playbackStopRequest);
        return localVarResp.getData();
    }

    /**
     * Stop audio playback
     * Stop audio being played on the call.  **Expected Webhooks:**  - &#x60;call.playback.ended&#x60; or &#x60;call.speak.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playbackStopRequest Stop audio playback request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callPlaybackStopWithHttpInfo(String callControlId, PlaybackStopRequest playbackStopRequest) throws ApiException {
        okhttp3.Call localVarCall = callPlaybackStopValidateBeforeCall(callControlId, playbackStopRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop audio playback (asynchronously)
     * Stop audio being played on the call.  **Expected Webhooks:**  - &#x60;call.playback.ended&#x60; or &#x60;call.speak.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param playbackStopRequest Stop audio playback request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callPlaybackStopAsync(String callControlId, PlaybackStopRequest playbackStopRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callPlaybackStopValidateBeforeCall(callControlId, playbackStopRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callRecordStart
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startRecordingRequest Start recording audio request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callRecordStartCall(String callControlId, StartRecordingRequest startRecordingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = startRecordingRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/record_start"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callRecordStartValidateBeforeCall(String callControlId, StartRecordingRequest startRecordingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callRecordStart(Async)");
        }
        
        // verify the required parameter 'startRecordingRequest' is set
        if (startRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'startRecordingRequest' when calling callRecordStart(Async)");
        }
        

        okhttp3.Call localVarCall = callRecordStartCall(callControlId, startRecordingRequest, _callback);
        return localVarCall;

    }

    /**
     * Recording start
     * Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.  **Expected Webhooks:**  - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startRecordingRequest Start recording audio request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callRecordStart(String callControlId, StartRecordingRequest startRecordingRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callRecordStartWithHttpInfo(callControlId, startRecordingRequest);
        return localVarResp.getData();
    }

    /**
     * Recording start
     * Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.  **Expected Webhooks:**  - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startRecordingRequest Start recording audio request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callRecordStartWithHttpInfo(String callControlId, StartRecordingRequest startRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = callRecordStartValidateBeforeCall(callControlId, startRecordingRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recording start (asynchronously)
     * Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.  **Expected Webhooks:**  - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param startRecordingRequest Start recording audio request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callRecordStartAsync(String callControlId, StartRecordingRequest startRecordingRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callRecordStartValidateBeforeCall(callControlId, startRecordingRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callRecordStop
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopRecordingRequest Stop recording call request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callRecordStopCall(String callControlId, StopRecordingRequest stopRecordingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stopRecordingRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/record_stop"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callRecordStopValidateBeforeCall(String callControlId, StopRecordingRequest stopRecordingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callRecordStop(Async)");
        }
        
        // verify the required parameter 'stopRecordingRequest' is set
        if (stopRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'stopRecordingRequest' when calling callRecordStop(Async)");
        }
        

        okhttp3.Call localVarCall = callRecordStopCall(callControlId, stopRecordingRequest, _callback);
        return localVarCall;

    }

    /**
     * Recording stop
     * Stop recording the call.  **Expected Webhooks:**  - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopRecordingRequest Stop recording call request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callRecordStop(String callControlId, StopRecordingRequest stopRecordingRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callRecordStopWithHttpInfo(callControlId, stopRecordingRequest);
        return localVarResp.getData();
    }

    /**
     * Recording stop
     * Stop recording the call.  **Expected Webhooks:**  - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopRecordingRequest Stop recording call request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callRecordStopWithHttpInfo(String callControlId, StopRecordingRequest stopRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = callRecordStopValidateBeforeCall(callControlId, stopRecordingRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recording stop (asynchronously)
     * Stop recording the call.  **Expected Webhooks:**  - &#x60;call.recording.saved&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param stopRecordingRequest Stop recording call request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callRecordStopAsync(String callControlId, StopRecordingRequest stopRecordingRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callRecordStopValidateBeforeCall(callControlId, stopRecordingRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callReject
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param rejectRequest Reject request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callRejectCall(String callControlId, RejectRequest rejectRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = rejectRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/reject"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callRejectValidateBeforeCall(String callControlId, RejectRequest rejectRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callReject(Async)");
        }
        
        // verify the required parameter 'rejectRequest' is set
        if (rejectRequest == null) {
            throw new ApiException("Missing the required parameter 'rejectRequest' when calling callReject(Async)");
        }
        

        okhttp3.Call localVarCall = callRejectCall(callControlId, rejectRequest, _callback);
        return localVarCall;

    }

    /**
     * Reject a call
     * Reject an incoming call.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param rejectRequest Reject request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callReject(String callControlId, RejectRequest rejectRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callRejectWithHttpInfo(callControlId, rejectRequest);
        return localVarResp.getData();
    }

    /**
     * Reject a call
     * Reject an incoming call.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param rejectRequest Reject request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callRejectWithHttpInfo(String callControlId, RejectRequest rejectRequest) throws ApiException {
        okhttp3.Call localVarCall = callRejectValidateBeforeCall(callControlId, rejectRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject a call (asynchronously)
     * Reject an incoming call.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param rejectRequest Reject request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callRejectAsync(String callControlId, RejectRequest rejectRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callRejectValidateBeforeCall(callControlId, rejectRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callSendDTMF
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param sendDTMFRequest Send DTMF request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callSendDTMFCall(String callControlId, SendDTMFRequest sendDTMFRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendDTMFRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/send_dtmf"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callSendDTMFValidateBeforeCall(String callControlId, SendDTMFRequest sendDTMFRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callSendDTMF(Async)");
        }
        
        // verify the required parameter 'sendDTMFRequest' is set
        if (sendDTMFRequest == null) {
            throw new ApiException("Missing the required parameter 'sendDTMFRequest' when calling callSendDTMF(Async)");
        }
        

        okhttp3.Call localVarCall = callSendDTMFCall(callControlId, sendDTMFRequest, _callback);
        return localVarCall;

    }

    /**
     * Send DTMF
     * Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.  **Expected Webhooks:**  There are no webhooks associated with this command. 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param sendDTMFRequest Send DTMF request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callSendDTMF(String callControlId, SendDTMFRequest sendDTMFRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callSendDTMFWithHttpInfo(callControlId, sendDTMFRequest);
        return localVarResp.getData();
    }

    /**
     * Send DTMF
     * Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.  **Expected Webhooks:**  There are no webhooks associated with this command. 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param sendDTMFRequest Send DTMF request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callSendDTMFWithHttpInfo(String callControlId, SendDTMFRequest sendDTMFRequest) throws ApiException {
        okhttp3.Call localVarCall = callSendDTMFValidateBeforeCall(callControlId, sendDTMFRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send DTMF (asynchronously)
     * Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.  **Expected Webhooks:**  There are no webhooks associated with this command. 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param sendDTMFRequest Send DTMF request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callSendDTMFAsync(String callControlId, SendDTMFRequest sendDTMFRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callSendDTMFValidateBeforeCall(callControlId, sendDTMFRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callSpeak
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param speakRequest Speak request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callSpeakCall(String callControlId, SpeakRequest speakRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = speakRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/speak"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callSpeakValidateBeforeCall(String callControlId, SpeakRequest speakRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callSpeak(Async)");
        }
        
        // verify the required parameter 'speakRequest' is set
        if (speakRequest == null) {
            throw new ApiException("Missing the required parameter 'speakRequest' when calling callSpeak(Async)");
        }
        

        okhttp3.Call localVarCall = callSpeakCall(callControlId, speakRequest, _callback);
        return localVarCall;

    }

    /**
     * Speak text
     * Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  **Expected Webhooks:**  - &#x60;call.speak.started&#x60; - &#x60;call.speak.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param speakRequest Speak request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callSpeak(String callControlId, SpeakRequest speakRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callSpeakWithHttpInfo(callControlId, speakRequest);
        return localVarResp.getData();
    }

    /**
     * Speak text
     * Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  **Expected Webhooks:**  - &#x60;call.speak.started&#x60; - &#x60;call.speak.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param speakRequest Speak request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callSpeakWithHttpInfo(String callControlId, SpeakRequest speakRequest) throws ApiException {
        okhttp3.Call localVarCall = callSpeakValidateBeforeCall(callControlId, speakRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Speak text (asynchronously)
     * Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  **Expected Webhooks:**  - &#x60;call.speak.started&#x60; - &#x60;call.speak.ended&#x60; 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param speakRequest Speak request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callSpeakAsync(String callControlId, SpeakRequest speakRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callSpeakValidateBeforeCall(callControlId, speakRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callTransfer
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param transferCallRequest Transfer call request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callTransferCall(String callControlId, TransferCallRequest transferCallRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transferCallRequest;

        // create path and map variables
        String localVarPath = "/calls/{call_control_id}/actions/transfer"
            .replaceAll("\\{" + "call_control_id" + "\\}", localVarApiClient.escapeString(callControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callTransferValidateBeforeCall(String callControlId, TransferCallRequest transferCallRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'callControlId' is set
        if (callControlId == null) {
            throw new ApiException("Missing the required parameter 'callControlId' when calling callTransfer(Async)");
        }
        
        // verify the required parameter 'transferCallRequest' is set
        if (transferCallRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCallRequest' when calling callTransfer(Async)");
        }
        

        okhttp3.Call localVarCall = callTransferCall(callControlId, transferCallRequest, _callback);
        return localVarCall;

    }

    /**
     * Transfer call
     * Transfer a call to a new destination. If the transfer is unsuccessful, a &#x60;call.hangup&#x60; webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.  **Expected Webhooks:**  - &#x60;call.initiated&#x60; - &#x60;call.bridged&#x60; to Leg B - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param transferCallRequest Transfer call request (required)
     * @return CallControlCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CallControlCommandResponse callTransfer(String callControlId, TransferCallRequest transferCallRequest) throws ApiException {
        ApiResponse<CallControlCommandResponse> localVarResp = callTransferWithHttpInfo(callControlId, transferCallRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer call
     * Transfer a call to a new destination. If the transfer is unsuccessful, a &#x60;call.hangup&#x60; webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.  **Expected Webhooks:**  - &#x60;call.initiated&#x60; - &#x60;call.bridged&#x60; to Leg B - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param transferCallRequest Transfer call request (required)
     * @return ApiResponse&lt;CallControlCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlCommandResponse> callTransferWithHttpInfo(String callControlId, TransferCallRequest transferCallRequest) throws ApiException {
        okhttp3.Call localVarCall = callTransferValidateBeforeCall(callControlId, transferCallRequest, null);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer call (asynchronously)
     * Transfer a call to a new destination. If the transfer is unsuccessful, a &#x60;call.hangup&#x60; webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.  **Expected Webhooks:**  - &#x60;call.initiated&#x60; - &#x60;call.bridged&#x60; to Leg B - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     * @param callControlId Unique identifier and token for controlling the call (required)
     * @param transferCallRequest Transfer call request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response upon making a call control command. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callTransferAsync(String callControlId, TransferCallRequest transferCallRequest, final ApiCallback<CallControlCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callTransferValidateBeforeCall(callControlId, transferCallRequest, _callback);
        Type localVarReturnType = new TypeToken<CallControlCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
