/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.CreateNumberOrderDocumentRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberOrderDocumentsResponse;
import com.telnyx.sdk.models.NumberOrderDocumentResponse;
import com.telnyx.sdk.models.UpdateNumberOrderDocumentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberOrderDocumentsApi {
    private ApiClient localVarApiClient;

    public NumberOrderDocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberOrderDocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createNumberOrderDocumentCall(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createNumberOrderDocumentRequest;

        // create path and map variables
        String localVarPath = "/number_order_documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNumberOrderDocumentValidateBeforeCall(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createNumberOrderDocumentRequest' is set
        if (createNumberOrderDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'createNumberOrderDocumentRequest' when calling createNumberOrderDocument(Async)");
        }
        

        okhttp3.Call localVarCall = createNumberOrderDocumentCall(createNumberOrderDocumentRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderDocumentResponse> createNumberOrderDocumentWithHttpInfo(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = createNumberOrderDocumentValidateBeforeCall(createNumberOrderDocumentRequest, null);
        Type localVarReturnType = new TypeToken<NumberOrderDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNumberOrderDocumentAsync(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest, final ApiCallback<NumberOrderDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNumberOrderDocumentValidateBeforeCall(createNumberOrderDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNumberOrderDocumentRequest {
        private final CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest;

        private APIcreateNumberOrderDocumentRequest(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest) {
            this.createNumberOrderDocumentRequest = createNumberOrderDocumentRequest;
        }

        /**
         * Build call for createNumberOrderDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNumberOrderDocumentCall(createNumberOrderDocumentRequest, _callback);
        }

        /**
         * Execute createNumberOrderDocument request
         * @return NumberOrderDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderDocumentResponse execute() throws ApiException {
            ApiResponse<NumberOrderDocumentResponse> localVarResp = createNumberOrderDocumentWithHttpInfo(createNumberOrderDocumentRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createNumberOrderDocument request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderDocumentResponse> executeWithHttpInfo() throws ApiException {
            return createNumberOrderDocumentWithHttpInfo(createNumberOrderDocumentRequest);
        }

        /**
         * Execute createNumberOrderDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderDocumentResponse> _callback) throws ApiException {
            return createNumberOrderDocumentAsync(createNumberOrderDocumentRequest, _callback);
        }
    }

    /**
     * Create a number order document
     * Upload a phone number order document.
     * @param createNumberOrderDocumentRequest  (required)
     * @return APIcreateNumberOrderDocumentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNumberOrderDocumentRequest createNumberOrderDocument(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest) {
        return new APIcreateNumberOrderDocumentRequest(createNumberOrderDocumentRequest);
    }
    private okhttp3.Call listNumberOrderDocumentsCall(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number_order_documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterRequirementId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[requirement_id]", filterRequirementId));
        }

        if (filterCreatedAtGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at][gt]", filterCreatedAtGt));
        }

        if (filterCreatedAtLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at][lt]", filterCreatedAtLt));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNumberOrderDocumentsValidateBeforeCall(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listNumberOrderDocumentsCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize, _callback);
        return localVarCall;

    }


    private ApiResponse<ListNumberOrderDocumentsResponse> listNumberOrderDocumentsWithHttpInfo(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listNumberOrderDocumentsValidateBeforeCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListNumberOrderDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listNumberOrderDocumentsAsync(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, Integer pageNumber, Integer pageSize, final ApiCallback<ListNumberOrderDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNumberOrderDocumentsValidateBeforeCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListNumberOrderDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistNumberOrderDocumentsRequest {
        private String filterRequirementId;
        private String filterCreatedAtGt;
        private String filterCreatedAtLt;
        private Integer pageNumber;
        private Integer pageSize;

        private APIlistNumberOrderDocumentsRequest() {
        }

        /**
         * Set filterRequirementId
         * @param filterRequirementId Filter number order documents by &#x60;requirement_id&#x60;. (optional)
         * @return APIlistNumberOrderDocumentsRequest
         */
        public APIlistNumberOrderDocumentsRequest filterRequirementId(String filterRequirementId) {
            this.filterRequirementId = filterRequirementId;
            return this;
        }

        /**
         * Set filterCreatedAtGt
         * @param filterCreatedAtGt Filter number order documents after this datetime. (optional)
         * @return APIlistNumberOrderDocumentsRequest
         */
        public APIlistNumberOrderDocumentsRequest filterCreatedAtGt(String filterCreatedAtGt) {
            this.filterCreatedAtGt = filterCreatedAtGt;
            return this;
        }

        /**
         * Set filterCreatedAtLt
         * @param filterCreatedAtLt Filter number order documents from before this datetime. (optional)
         * @return APIlistNumberOrderDocumentsRequest
         */
        public APIlistNumberOrderDocumentsRequest filterCreatedAtLt(String filterCreatedAtLt) {
            this.filterCreatedAtLt = filterCreatedAtLt;
            return this;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number to load (optional, default to 1)
         * @return APIlistNumberOrderDocumentsRequest
         */
        public APIlistNumberOrderDocumentsRequest pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize The size of the page (optional, default to 20)
         * @return APIlistNumberOrderDocumentsRequest
         */
        public APIlistNumberOrderDocumentsRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for listNumberOrderDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order documents. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listNumberOrderDocumentsCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize, _callback);
        }

        /**
         * Execute listNumberOrderDocuments request
         * @return ListNumberOrderDocumentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order documents. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ListNumberOrderDocumentsResponse execute() throws ApiException {
            ApiResponse<ListNumberOrderDocumentsResponse> localVarResp = listNumberOrderDocumentsWithHttpInfo(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute listNumberOrderDocuments request with HTTP info returned
         * @return ApiResponse&lt;ListNumberOrderDocumentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order documents. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListNumberOrderDocumentsResponse> executeWithHttpInfo() throws ApiException {
            return listNumberOrderDocumentsWithHttpInfo(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize);
        }

        /**
         * Execute listNumberOrderDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of number order documents. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListNumberOrderDocumentsResponse> _callback) throws ApiException {
            return listNumberOrderDocumentsAsync(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List number order documents
     * Gets a paginated list of number order documents.
     * @return APIlistNumberOrderDocumentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of number order documents. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistNumberOrderDocumentsRequest listNumberOrderDocuments() {
        return new APIlistNumberOrderDocumentsRequest();
    }
    private okhttp3.Call retrieveNumberOrderDocumentCall(String numberOrderDocumentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number_order_documents/{number_order_document_id}"
            .replaceAll("\\{" + "number_order_document_id" + "\\}", localVarApiClient.escapeString(numberOrderDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveNumberOrderDocumentValidateBeforeCall(String numberOrderDocumentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numberOrderDocumentId' is set
        if (numberOrderDocumentId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderDocumentId' when calling retrieveNumberOrderDocument(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveNumberOrderDocumentCall(numberOrderDocumentId, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderDocumentResponse> retrieveNumberOrderDocumentWithHttpInfo(String numberOrderDocumentId) throws ApiException {
        okhttp3.Call localVarCall = retrieveNumberOrderDocumentValidateBeforeCall(numberOrderDocumentId, null);
        Type localVarReturnType = new TypeToken<NumberOrderDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveNumberOrderDocumentAsync(String numberOrderDocumentId, final ApiCallback<NumberOrderDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveNumberOrderDocumentValidateBeforeCall(numberOrderDocumentId, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIretrieveNumberOrderDocumentRequest {
        private final String numberOrderDocumentId;

        private APIretrieveNumberOrderDocumentRequest(String numberOrderDocumentId) {
            this.numberOrderDocumentId = numberOrderDocumentId;
        }

        /**
         * Build call for retrieveNumberOrderDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveNumberOrderDocumentCall(numberOrderDocumentId, _callback);
        }

        /**
         * Execute retrieveNumberOrderDocument request
         * @return NumberOrderDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderDocumentResponse execute() throws ApiException {
            ApiResponse<NumberOrderDocumentResponse> localVarResp = retrieveNumberOrderDocumentWithHttpInfo(numberOrderDocumentId);
            return localVarResp.getData();
        }

        /**
         * Execute retrieveNumberOrderDocument request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderDocumentResponse> executeWithHttpInfo() throws ApiException {
            return retrieveNumberOrderDocumentWithHttpInfo(numberOrderDocumentId);
        }

        /**
         * Execute retrieveNumberOrderDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderDocumentResponse> _callback) throws ApiException {
            return retrieveNumberOrderDocumentAsync(numberOrderDocumentId, _callback);
        }
    }

    /**
     * Retrieve a number order document
     * Gets a single number order document.
     * @param numberOrderDocumentId The number order document ID. (required)
     * @return APIretrieveNumberOrderDocumentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIretrieveNumberOrderDocumentRequest retrieveNumberOrderDocument(String numberOrderDocumentId) {
        return new APIretrieveNumberOrderDocumentRequest(numberOrderDocumentId);
    }
    private okhttp3.Call updateNumberOrderDocumentCall(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateNumberOrderDocumentRequest;

        // create path and map variables
        String localVarPath = "/number_order_documents/{number_order_document_id}"
            .replaceAll("\\{" + "number_order_document_id" + "\\}", localVarApiClient.escapeString(numberOrderDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNumberOrderDocumentValidateBeforeCall(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numberOrderDocumentId' is set
        if (numberOrderDocumentId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderDocumentId' when calling updateNumberOrderDocument(Async)");
        }
        
        // verify the required parameter 'updateNumberOrderDocumentRequest' is set
        if (updateNumberOrderDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateNumberOrderDocumentRequest' when calling updateNumberOrderDocument(Async)");
        }
        

        okhttp3.Call localVarCall = updateNumberOrderDocumentCall(numberOrderDocumentId, updateNumberOrderDocumentRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<NumberOrderDocumentResponse> updateNumberOrderDocumentWithHttpInfo(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNumberOrderDocumentValidateBeforeCall(numberOrderDocumentId, updateNumberOrderDocumentRequest, null);
        Type localVarReturnType = new TypeToken<NumberOrderDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNumberOrderDocumentAsync(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest, final ApiCallback<NumberOrderDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNumberOrderDocumentValidateBeforeCall(numberOrderDocumentId, updateNumberOrderDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<NumberOrderDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateNumberOrderDocumentRequest {
        private final String numberOrderDocumentId;
        private final UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest;

        private APIupdateNumberOrderDocumentRequest(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest) {
            this.numberOrderDocumentId = numberOrderDocumentId;
            this.updateNumberOrderDocumentRequest = updateNumberOrderDocumentRequest;
        }

        /**
         * Build call for updateNumberOrderDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateNumberOrderDocumentCall(numberOrderDocumentId, updateNumberOrderDocumentRequest, _callback);
        }

        /**
         * Execute updateNumberOrderDocument request
         * @return NumberOrderDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public NumberOrderDocumentResponse execute() throws ApiException {
            ApiResponse<NumberOrderDocumentResponse> localVarResp = updateNumberOrderDocumentWithHttpInfo(numberOrderDocumentId, updateNumberOrderDocumentRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateNumberOrderDocument request with HTTP info returned
         * @return ApiResponse&lt;NumberOrderDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NumberOrderDocumentResponse> executeWithHttpInfo() throws ApiException {
            return updateNumberOrderDocumentWithHttpInfo(numberOrderDocumentId, updateNumberOrderDocumentRequest);
        }

        /**
         * Execute updateNumberOrderDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NumberOrderDocumentResponse> _callback) throws ApiException {
            return updateNumberOrderDocumentAsync(numberOrderDocumentId, updateNumberOrderDocumentRequest, _callback);
        }
    }

    /**
     * Update a number order document
     * Updates a number order document.
     * @param numberOrderDocumentId The number order document ID. (required)
     * @param updateNumberOrderDocumentRequest  (required)
     * @return APIupdateNumberOrderDocumentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a number order document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateNumberOrderDocumentRequest updateNumberOrderDocument(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest) {
        return new APIupdateNumberOrderDocumentRequest(numberOrderDocumentId, updateNumberOrderDocumentRequest);
    }
}
