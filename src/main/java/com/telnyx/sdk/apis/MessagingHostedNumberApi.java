/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.CreateMessagingHostedNumberOrderRequest;
import com.telnyx.sdk.models.Errors;
import java.io.File;
import com.telnyx.sdk.models.ListMessagingHostedNumberOrderResponse;
import com.telnyx.sdk.models.RetrieveMessagingHostedNumberOrderResponse;
import com.telnyx.sdk.models.RetrieveMessagingHostedNumberResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagingHostedNumberApi {
    private ApiClient localVarApiClient;

    public MessagingHostedNumberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagingHostedNumberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createMessagingHostedNumberOrderCall(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMessagingHostedNumberOrderRequest;

        // create path and map variables
        String localVarPath = "/messaging_hosted_number_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessagingHostedNumberOrderValidateBeforeCall(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createMessagingHostedNumberOrderCall(createMessagingHostedNumberOrderRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<RetrieveMessagingHostedNumberOrderResponse> createMessagingHostedNumberOrderWithHttpInfo(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createMessagingHostedNumberOrderValidateBeforeCall(createMessagingHostedNumberOrderRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMessagingHostedNumberOrderAsync(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest, final ApiCallback<RetrieveMessagingHostedNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessagingHostedNumberOrderValidateBeforeCall(createMessagingHostedNumberOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateMessagingHostedNumberOrderRequest {
        private CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest;

        private APIcreateMessagingHostedNumberOrderRequest() {
        }

        /**
         * Set createMessagingHostedNumberOrderRequest
         * @param createMessagingHostedNumberOrderRequest Message payload (optional)
         * @return APIcreateMessagingHostedNumberOrderRequest
         */
        public APIcreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest) {
            this.createMessagingHostedNumberOrderRequest = createMessagingHostedNumberOrderRequest;
            return this;
        }

        /**
         * Build call for createMessagingHostedNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createMessagingHostedNumberOrderCall(createMessagingHostedNumberOrderRequest, _callback);
        }

        /**
         * Execute createMessagingHostedNumberOrder request
         * @return RetrieveMessagingHostedNumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public RetrieveMessagingHostedNumberOrderResponse execute() throws ApiException {
            ApiResponse<RetrieveMessagingHostedNumberOrderResponse> localVarResp = createMessagingHostedNumberOrderWithHttpInfo(createMessagingHostedNumberOrderRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createMessagingHostedNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;RetrieveMessagingHostedNumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetrieveMessagingHostedNumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return createMessagingHostedNumberOrderWithHttpInfo(createMessagingHostedNumberOrderRequest);
        }

        /**
         * Execute createMessagingHostedNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetrieveMessagingHostedNumberOrderResponse> _callback) throws ApiException {
            return createMessagingHostedNumberOrderAsync(createMessagingHostedNumberOrderRequest, _callback);
        }
    }

    /**
     * Create a messaging hosted number order
     * 
     * @return APIcreateMessagingHostedNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrder() {
        return new APIcreateMessagingHostedNumberOrderRequest();
    }
    private okhttp3.Call deleteMessagingHostedNumberCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_hosted_numbers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessagingHostedNumberValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteMessagingHostedNumber(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMessagingHostedNumberCall(id, _callback);
        return localVarCall;

    }


    private ApiResponse<RetrieveMessagingHostedNumberResponse> deleteMessagingHostedNumberWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteMessagingHostedNumberValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMessagingHostedNumberAsync(String id, final ApiCallback<RetrieveMessagingHostedNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessagingHostedNumberValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteMessagingHostedNumberRequest {
        private final String id;

        private APIdeleteMessagingHostedNumberRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteMessagingHostedNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMessagingHostedNumberCall(id, _callback);
        }

        /**
         * Execute deleteMessagingHostedNumber request
         * @return RetrieveMessagingHostedNumberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public RetrieveMessagingHostedNumberResponse execute() throws ApiException {
            ApiResponse<RetrieveMessagingHostedNumberResponse> localVarResp = deleteMessagingHostedNumberWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteMessagingHostedNumber request with HTTP info returned
         * @return ApiResponse&lt;RetrieveMessagingHostedNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetrieveMessagingHostedNumberResponse> executeWithHttpInfo() throws ApiException {
            return deleteMessagingHostedNumberWithHttpInfo(id);
        }

        /**
         * Execute deleteMessagingHostedNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetrieveMessagingHostedNumberResponse> _callback) throws ApiException {
            return deleteMessagingHostedNumberAsync(id, _callback);
        }
    }

    /**
     * Delete a messaging hosted number
     * 
     * @param id Identifies the type of resource. (required)
     * @return APIdeleteMessagingHostedNumberRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging hosted number. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteMessagingHostedNumberRequest deleteMessagingHostedNumber(String id) {
        return new APIdeleteMessagingHostedNumberRequest(id);
    }
    private okhttp3.Call listMessagingHostedNumberOrderCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_hosted_number_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagingHostedNumberOrderValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMessagingHostedNumberOrderCall(_callback);
        return localVarCall;

    }


    private ApiResponse<ListMessagingHostedNumberOrderResponse> listMessagingHostedNumberOrderWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMessagingHostedNumberOrderValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListMessagingHostedNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMessagingHostedNumberOrderAsync(final ApiCallback<ListMessagingHostedNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagingHostedNumberOrderValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListMessagingHostedNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistMessagingHostedNumberOrderRequest {

        private APIlistMessagingHostedNumberOrderRequest() {
        }

        /**
         * Build call for listMessagingHostedNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of messaging hosted number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMessagingHostedNumberOrderCall(_callback);
        }

        /**
         * Execute listMessagingHostedNumberOrder request
         * @return ListMessagingHostedNumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of messaging hosted number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ListMessagingHostedNumberOrderResponse execute() throws ApiException {
            ApiResponse<ListMessagingHostedNumberOrderResponse> localVarResp = listMessagingHostedNumberOrderWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listMessagingHostedNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;ListMessagingHostedNumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of messaging hosted number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListMessagingHostedNumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return listMessagingHostedNumberOrderWithHttpInfo();
        }

        /**
         * Execute listMessagingHostedNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with a list of messaging hosted number orders. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListMessagingHostedNumberOrderResponse> _callback) throws ApiException {
            return listMessagingHostedNumberOrderAsync(_callback);
        }
    }

    /**
     * List messaging hosted number orders
     * 
     * @return APIlistMessagingHostedNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging hosted number orders. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistMessagingHostedNumberOrderRequest listMessagingHostedNumberOrder() {
        return new APIlistMessagingHostedNumberOrderRequest();
    }
    private okhttp3.Call retrieveMessagingHostedNumberOrderCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_hosted_number_orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveMessagingHostedNumberOrderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveMessagingHostedNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveMessagingHostedNumberOrderCall(id, _callback);
        return localVarCall;

    }


    private ApiResponse<RetrieveMessagingHostedNumberOrderResponse> retrieveMessagingHostedNumberOrderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = retrieveMessagingHostedNumberOrderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveMessagingHostedNumberOrderAsync(String id, final ApiCallback<RetrieveMessagingHostedNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveMessagingHostedNumberOrderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIretrieveMessagingHostedNumberOrderRequest {
        private final String id;

        private APIretrieveMessagingHostedNumberOrderRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for retrieveMessagingHostedNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveMessagingHostedNumberOrderCall(id, _callback);
        }

        /**
         * Execute retrieveMessagingHostedNumberOrder request
         * @return RetrieveMessagingHostedNumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public RetrieveMessagingHostedNumberOrderResponse execute() throws ApiException {
            ApiResponse<RetrieveMessagingHostedNumberOrderResponse> localVarResp = retrieveMessagingHostedNumberOrderWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute retrieveMessagingHostedNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;RetrieveMessagingHostedNumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetrieveMessagingHostedNumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return retrieveMessagingHostedNumberOrderWithHttpInfo(id);
        }

        /**
         * Execute retrieveMessagingHostedNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetrieveMessagingHostedNumberOrderResponse> _callback) throws ApiException {
            return retrieveMessagingHostedNumberOrderAsync(id, _callback);
        }
    }

    /**
     * Retrieve a messaging hosted number order
     * 
     * @param id Identifies the type of resource. (required)
     * @return APIretrieveMessagingHostedNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIretrieveMessagingHostedNumberOrderRequest retrieveMessagingHostedNumberOrder(String id) {
        return new APIretrieveMessagingHostedNumberOrderRequest(id);
    }
    private okhttp3.Call uploadFileMessagingHostedNumberOrderCall(String id, File loa, File bill, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_hosted_number_orders/{id}/actions/file_upload"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (loa != null) {
            localVarFormParams.put("loa", loa);
        }

        if (bill != null) {
            localVarFormParams.put("bill", bill);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileMessagingHostedNumberOrderValidateBeforeCall(String id, File loa, File bill, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadFileMessagingHostedNumberOrder(Async)");
        }
        

        okhttp3.Call localVarCall = uploadFileMessagingHostedNumberOrderCall(id, loa, bill, _callback);
        return localVarCall;

    }


    private ApiResponse<RetrieveMessagingHostedNumberOrderResponse> uploadFileMessagingHostedNumberOrderWithHttpInfo(String id, File loa, File bill) throws ApiException {
        okhttp3.Call localVarCall = uploadFileMessagingHostedNumberOrderValidateBeforeCall(id, loa, bill, null);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadFileMessagingHostedNumberOrderAsync(String id, File loa, File bill, final ApiCallback<RetrieveMessagingHostedNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileMessagingHostedNumberOrderValidateBeforeCall(id, loa, bill, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMessagingHostedNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuploadFileMessagingHostedNumberOrderRequest {
        private final String id;
        private File loa;
        private File bill;

        private APIuploadFileMessagingHostedNumberOrderRequest(String id) {
            this.id = id;
        }

        /**
         * Set loa
         * @param loa Must be a signed LOA for the numbers in the order in PDF format. (optional)
         * @return APIuploadFileMessagingHostedNumberOrderRequest
         */
        public APIuploadFileMessagingHostedNumberOrderRequest loa(File loa) {
            this.loa = loa;
            return this;
        }

        /**
         * Set bill
         * @param bill Must be the last month&#39;s bill with proof of ownership of all of the numbers in the order in PDF format. (optional)
         * @return APIuploadFileMessagingHostedNumberOrderRequest
         */
        public APIuploadFileMessagingHostedNumberOrderRequest bill(File bill) {
            this.bill = bill;
            return this;
        }

        /**
         * Build call for uploadFileMessagingHostedNumberOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadFileMessagingHostedNumberOrderCall(id, loa, bill, _callback);
        }

        /**
         * Execute uploadFileMessagingHostedNumberOrder request
         * @return RetrieveMessagingHostedNumberOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public RetrieveMessagingHostedNumberOrderResponse execute() throws ApiException {
            ApiResponse<RetrieveMessagingHostedNumberOrderResponse> localVarResp = uploadFileMessagingHostedNumberOrderWithHttpInfo(id, loa, bill);
            return localVarResp.getData();
        }

        /**
         * Execute uploadFileMessagingHostedNumberOrder request with HTTP info returned
         * @return ApiResponse&lt;RetrieveMessagingHostedNumberOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetrieveMessagingHostedNumberOrderResponse> executeWithHttpInfo() throws ApiException {
            return uploadFileMessagingHostedNumberOrderWithHttpInfo(id, loa, bill);
        }

        /**
         * Execute uploadFileMessagingHostedNumberOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetrieveMessagingHostedNumberOrderResponse> _callback) throws ApiException {
            return uploadFileMessagingHostedNumberOrderAsync(id, loa, bill, _callback);
        }
    }

    /**
     * Upload file required for a messaging hosted number order
     * 
     * @param id Identifies the type of resource. (required)
     * @return APIuploadFileMessagingHostedNumberOrderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging hosted number order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIuploadFileMessagingHostedNumberOrderRequest uploadFileMessagingHostedNumberOrder(String id) {
        return new APIuploadFileMessagingHostedNumberOrderRequest(id);
    }
}
