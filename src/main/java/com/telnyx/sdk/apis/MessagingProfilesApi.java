/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.CreateMessagingProfileRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListMessagingProfileMetricsResponse;
import com.telnyx.sdk.models.ListMessagingProfilePhoneNumbersResponse;
import com.telnyx.sdk.models.ListMessagingProfileShortCodesResponse;
import com.telnyx.sdk.models.ListMessagingProfilesResponse;
import com.telnyx.sdk.models.MessagingProfileResponse;
import com.telnyx.sdk.models.RetrieveMessagingProfileMetricsResponse;
import java.util.UUID;
import com.telnyx.sdk.models.UpdateMessagingProfileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagingProfilesApi {
    private ApiClient localVarApiClient;

    public MessagingProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagingProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMessagingProfile
     * @param createMessagingProfileRequest New Messaging Profile object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessagingProfileCall(CreateMessagingProfileRequest createMessagingProfileRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMessagingProfileRequest;

        // create path and map variables
        String localVarPath = "/messaging_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessagingProfileValidateBeforeCall(CreateMessagingProfileRequest createMessagingProfileRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createMessagingProfileRequest' is set
        if (createMessagingProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createMessagingProfileRequest' when calling createMessagingProfile(Async)");
        }
        

        okhttp3.Call localVarCall = createMessagingProfileCall(createMessagingProfileRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a messaging profile
     * 
     * @param createMessagingProfileRequest New Messaging Profile object (required)
     * @return MessagingProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MessagingProfileResponse createMessagingProfile(CreateMessagingProfileRequest createMessagingProfileRequest) throws ApiException {
        ApiResponse<MessagingProfileResponse> localVarResp = createMessagingProfileWithHttpInfo(createMessagingProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Create a messaging profile
     * 
     * @param createMessagingProfileRequest New Messaging Profile object (required)
     * @return ApiResponse&lt;MessagingProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingProfileResponse> createMessagingProfileWithHttpInfo(CreateMessagingProfileRequest createMessagingProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createMessagingProfileValidateBeforeCall(createMessagingProfileRequest, null);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a messaging profile (asynchronously)
     * 
     * @param createMessagingProfileRequest New Messaging Profile object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessagingProfileAsync(CreateMessagingProfileRequest createMessagingProfileRequest, final ApiCallback<MessagingProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessagingProfileValidateBeforeCall(createMessagingProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessagingProfile
     * @param id The id of the messaging profile to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessagingProfileCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profiles/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessagingProfileValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteMessagingProfile(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMessagingProfileCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @return MessagingProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MessagingProfileResponse deleteMessagingProfile(UUID id) throws ApiException {
        ApiResponse<MessagingProfileResponse> localVarResp = deleteMessagingProfileWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @return ApiResponse&lt;MessagingProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingProfileResponse> deleteMessagingProfileWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteMessagingProfileValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a messaging profile (asynchronously)
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessagingProfileAsync(UUID id, final ApiCallback<MessagingProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessagingProfileValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessagingProfileDetailedMetrics
     * @param id The id of the messaging profile to retrieve (required)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile&#39;s metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagingProfileDetailedMetricsCall(UUID id, String timeFrame, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profiles/{id}/metrics"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_frame", timeFrame));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagingProfileDetailedMetricsValidateBeforeCall(UUID id, String timeFrame, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMessagingProfileDetailedMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = getMessagingProfileDetailedMetricsCall(id, timeFrame, _callback);
        return localVarCall;

    }

    /**
     * Retrieve messaging profile metrics
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @return RetrieveMessagingProfileMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile&#39;s metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveMessagingProfileMetricsResponse getMessagingProfileDetailedMetrics(UUID id, String timeFrame) throws ApiException {
        ApiResponse<RetrieveMessagingProfileMetricsResponse> localVarResp = getMessagingProfileDetailedMetricsWithHttpInfo(id, timeFrame);
        return localVarResp.getData();
    }

    /**
     * Retrieve messaging profile metrics
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @return ApiResponse&lt;RetrieveMessagingProfileMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile&#39;s metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveMessagingProfileMetricsResponse> getMessagingProfileDetailedMetricsWithHttpInfo(UUID id, String timeFrame) throws ApiException {
        okhttp3.Call localVarCall = getMessagingProfileDetailedMetricsValidateBeforeCall(id, timeFrame, null);
        Type localVarReturnType = new TypeToken<RetrieveMessagingProfileMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve messaging profile metrics (asynchronously)
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile&#39;s metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagingProfileDetailedMetricsAsync(UUID id, String timeFrame, final ApiCallback<RetrieveMessagingProfileMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagingProfileDetailedMetricsValidateBeforeCall(id, timeFrame, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMessagingProfileMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessagingProfileMetrics
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param id The id of the messaging profile(s) to retrieve (optional)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfileMetricsCall(Integer pageNumber, Integer pageSize, UUID id, String timeFrame, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profile_metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_frame", timeFrame));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagingProfileMetricsValidateBeforeCall(Integer pageNumber, Integer pageSize, UUID id, String timeFrame, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMessagingProfileMetricsCall(pageNumber, pageSize, id, timeFrame, _callback);
        return localVarCall;

    }

    /**
     * List messaging profile metrics
     * 
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param id The id of the messaging profile(s) to retrieve (optional)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @return ListMessagingProfileMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagingProfileMetricsResponse listMessagingProfileMetrics(Integer pageNumber, Integer pageSize, UUID id, String timeFrame) throws ApiException {
        ApiResponse<ListMessagingProfileMetricsResponse> localVarResp = listMessagingProfileMetricsWithHttpInfo(pageNumber, pageSize, id, timeFrame);
        return localVarResp.getData();
    }

    /**
     * List messaging profile metrics
     * 
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param id The id of the messaging profile(s) to retrieve (optional)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @return ApiResponse&lt;ListMessagingProfileMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessagingProfileMetricsResponse> listMessagingProfileMetricsWithHttpInfo(Integer pageNumber, Integer pageSize, UUID id, String timeFrame) throws ApiException {
        okhttp3.Call localVarCall = listMessagingProfileMetricsValidateBeforeCall(pageNumber, pageSize, id, timeFrame, null);
        Type localVarReturnType = new TypeToken<ListMessagingProfileMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List messaging profile metrics (asynchronously)
     * 
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param id The id of the messaging profile(s) to retrieve (optional)
     * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfileMetricsAsync(Integer pageNumber, Integer pageSize, UUID id, String timeFrame, final ApiCallback<ListMessagingProfileMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagingProfileMetricsValidateBeforeCall(pageNumber, pageSize, id, timeFrame, _callback);
        Type localVarReturnType = new TypeToken<ListMessagingProfileMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessagingProfilePhoneNumbers
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile phone numbers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfilePhoneNumbersCall(UUID id, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profiles/{id}/phone_numbers"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagingProfilePhoneNumbersValidateBeforeCall(UUID id, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listMessagingProfilePhoneNumbers(Async)");
        }
        

        okhttp3.Call localVarCall = listMessagingProfilePhoneNumbersCall(id, pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List phone numbers associated with a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ListMessagingProfilePhoneNumbersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile phone numbers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagingProfilePhoneNumbersResponse listMessagingProfilePhoneNumbers(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ListMessagingProfilePhoneNumbersResponse> localVarResp = listMessagingProfilePhoneNumbersWithHttpInfo(id, pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * List phone numbers associated with a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ApiResponse&lt;ListMessagingProfilePhoneNumbersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile phone numbers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessagingProfilePhoneNumbersResponse> listMessagingProfilePhoneNumbersWithHttpInfo(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listMessagingProfilePhoneNumbersValidateBeforeCall(id, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListMessagingProfilePhoneNumbersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List phone numbers associated with a messaging profile (asynchronously)
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile phone numbers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfilePhoneNumbersAsync(UUID id, Integer pageNumber, Integer pageSize, final ApiCallback<ListMessagingProfilePhoneNumbersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagingProfilePhoneNumbersValidateBeforeCall(id, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListMessagingProfilePhoneNumbersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessagingProfileShortCodes
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile short codes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfileShortCodesCall(UUID id, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profiles/{id}/short_codes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagingProfileShortCodesValidateBeforeCall(UUID id, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listMessagingProfileShortCodes(Async)");
        }
        

        okhttp3.Call localVarCall = listMessagingProfileShortCodesCall(id, pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List short codes associated with a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ListMessagingProfileShortCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile short codes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagingProfileShortCodesResponse listMessagingProfileShortCodes(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ListMessagingProfileShortCodesResponse> localVarResp = listMessagingProfileShortCodesWithHttpInfo(id, pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * List short codes associated with a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ApiResponse&lt;ListMessagingProfileShortCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile short codes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessagingProfileShortCodesResponse> listMessagingProfileShortCodesWithHttpInfo(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listMessagingProfileShortCodesValidateBeforeCall(id, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListMessagingProfileShortCodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List short codes associated with a messaging profile (asynchronously)
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profile short codes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfileShortCodesAsync(UUID id, Integer pageNumber, Integer pageSize, final ApiCallback<ListMessagingProfileShortCodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagingProfileShortCodesValidateBeforeCall(id, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListMessagingProfileShortCodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessagingProfiles
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profiles. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfilesCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagingProfilesValidateBeforeCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMessagingProfilesCall(pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List messaging profiles
     * 
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ListMessagingProfilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profiles. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagingProfilesResponse listMessagingProfiles(Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ListMessagingProfilesResponse> localVarResp = listMessagingProfilesWithHttpInfo(pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * List messaging profiles
     * 
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @return ApiResponse&lt;ListMessagingProfilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profiles. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessagingProfilesResponse> listMessagingProfilesWithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listMessagingProfilesValidateBeforeCall(pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ListMessagingProfilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List messaging profiles (asynchronously)
     * 
     * @param pageNumber The page number to load (optional, default to 1)
     * @param pageSize The size of the page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of messaging profiles. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagingProfilesAsync(Integer pageNumber, Integer pageSize, final ApiCallback<ListMessagingProfilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagingProfilesValidateBeforeCall(pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListMessagingProfilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveMessagingProfile
     * @param id The id of the messaging profile to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveMessagingProfileCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging_profiles/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveMessagingProfileValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveMessagingProfile(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveMessagingProfileCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @return MessagingProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MessagingProfileResponse retrieveMessagingProfile(UUID id) throws ApiException {
        ApiResponse<MessagingProfileResponse> localVarResp = retrieveMessagingProfileWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @return ApiResponse&lt;MessagingProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingProfileResponse> retrieveMessagingProfileWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = retrieveMessagingProfileValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a messaging profile (asynchronously)
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveMessagingProfileAsync(UUID id, final ApiCallback<MessagingProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveMessagingProfileValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessagingProfile
     * @param id The id of the messaging profile to retrieve (required)
     * @param updateMessagingProfileRequest New Messaging Profile object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessagingProfileCall(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateMessagingProfileRequest;

        // create path and map variables
        String localVarPath = "/messaging_profiles/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessagingProfileValidateBeforeCall(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateMessagingProfile(Async)");
        }
        
        // verify the required parameter 'updateMessagingProfileRequest' is set
        if (updateMessagingProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMessagingProfileRequest' when calling updateMessagingProfile(Async)");
        }
        

        okhttp3.Call localVarCall = updateMessagingProfileCall(id, updateMessagingProfileRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param updateMessagingProfileRequest New Messaging Profile object (required)
     * @return MessagingProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MessagingProfileResponse updateMessagingProfile(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest) throws ApiException {
        ApiResponse<MessagingProfileResponse> localVarResp = updateMessagingProfileWithHttpInfo(id, updateMessagingProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update a messaging profile
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param updateMessagingProfileRequest New Messaging Profile object (required)
     * @return ApiResponse&lt;MessagingProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingProfileResponse> updateMessagingProfileWithHttpInfo(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMessagingProfileValidateBeforeCall(id, updateMessagingProfileRequest, null);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a messaging profile (asynchronously)
     * 
     * @param id The id of the messaging profile to retrieve (required)
     * @param updateMessagingProfileRequest New Messaging Profile object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with details about a messaging profile. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessagingProfileAsync(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest, final ApiCallback<MessagingProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessagingProfileValidateBeforeCall(id, updateMessagingProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<MessagingProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
