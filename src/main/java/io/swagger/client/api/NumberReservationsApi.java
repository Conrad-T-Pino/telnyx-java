/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateNumberReservationsResponse;
import io.swagger.client.model.Errors;
import io.swagger.client.model.ListNumberReservationsResponse;
import io.swagger.client.model.NumberReservation;
import io.swagger.client.model.RetrieveNumberReservationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberReservationsApi {
    private ApiClient apiClient;

    public NumberReservationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberReservationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNumberReservations
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNumberReservationsCall(NumberReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/number_reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNumberReservationsValidateBeforeCall(NumberReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNumberReservations(Async)");
        }
        
        com.squareup.okhttp.Call call = createNumberReservationsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Phone Number Reservation
     * Creates a Phone Number Reservation for multiple numbers
     * @param body  (required)
     * @return CreateNumberReservationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNumberReservationsResponse createNumberReservations(NumberReservation body) throws ApiException {
        ApiResponse<CreateNumberReservationsResponse> resp = createNumberReservationsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Phone Number Reservation
     * Creates a Phone Number Reservation for multiple numbers
     * @param body  (required)
     * @return ApiResponse&lt;CreateNumberReservationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNumberReservationsResponse> createNumberReservationsWithHttpInfo(NumberReservation body) throws ApiException {
        com.squareup.okhttp.Call call = createNumberReservationsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateNumberReservationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Phone Number Reservation (asynchronously)
     * Creates a Phone Number Reservation for multiple numbers
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNumberReservationsAsync(NumberReservation body, final ApiCallback<CreateNumberReservationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNumberReservationsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNumberReservationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for extendNumberReservationExpiryTime
     * @param numberReservationId The number reservation id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call extendNumberReservationExpiryTimeCall(String numberReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/number_reservations/{number_reservation_id}/actions/extend"
            .replaceAll("\\{" + "number_reservation_id" + "\\}", apiClient.escapeString(numberReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call extendNumberReservationExpiryTimeValidateBeforeCall(String numberReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'numberReservationId' is set
        if (numberReservationId == null) {
            throw new ApiException("Missing the required parameter 'numberReservationId' when calling extendNumberReservationExpiryTime(Async)");
        }
        
        com.squareup.okhttp.Call call = extendNumberReservationExpiryTimeCall(numberReservationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Extend a Phone Number Reservation
     * Extends reservation expiry time on all phone numbers
     * @param numberReservationId The number reservation id (required)
     * @return RetrieveNumberReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveNumberReservationResponse extendNumberReservationExpiryTime(String numberReservationId) throws ApiException {
        ApiResponse<RetrieveNumberReservationResponse> resp = extendNumberReservationExpiryTimeWithHttpInfo(numberReservationId);
        return resp.getData();
    }

    /**
     * Extend a Phone Number Reservation
     * Extends reservation expiry time on all phone numbers
     * @param numberReservationId The number reservation id (required)
     * @return ApiResponse&lt;RetrieveNumberReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveNumberReservationResponse> extendNumberReservationExpiryTimeWithHttpInfo(String numberReservationId) throws ApiException {
        com.squareup.okhttp.Call call = extendNumberReservationExpiryTimeValidateBeforeCall(numberReservationId, null, null);
        Type localVarReturnType = new TypeToken<RetrieveNumberReservationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extend a Phone Number Reservation (asynchronously)
     * Extends reservation expiry time on all phone numbers
     * @param numberReservationId The number reservation id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call extendNumberReservationExpiryTimeAsync(String numberReservationId, final ApiCallback<RetrieveNumberReservationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = extendNumberReservationExpiryTimeValidateBeforeCall(numberReservationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveNumberReservationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNumberReservations
     * @param filterStatus Filter number reservations by status (optional)
     * @param filterCreatedAtGt Filter number reservations later than this value (optional)
     * @param filterCreatedAtLt Filter number reservations earlier than this value (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number reservations having these phone numbers (optional)
     * @param filterCustomerReference Filter number reservations via the customer reference set (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNumberReservationsCall(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/number_reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[status]", filterStatus));
        if (filterCreatedAtGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[created_at][gt]", filterCreatedAtGt));
        if (filterCreatedAtLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[created_at][lt]", filterCreatedAtLt));
        if (filterPhoneNumbersPhoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[phone_numbers.phone_number]", filterPhoneNumbersPhoneNumber));
        if (filterCustomerReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[customer_reference]", filterCustomerReference));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNumberReservationsValidateBeforeCall(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNumberReservationsCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List multiple Number Reservations
     * Gets a paginated list of Phone Number Reservations
     * @param filterStatus Filter number reservations by status (optional)
     * @param filterCreatedAtGt Filter number reservations later than this value (optional)
     * @param filterCreatedAtLt Filter number reservations earlier than this value (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number reservations having these phone numbers (optional)
     * @param filterCustomerReference Filter number reservations via the customer reference set (optional)
     * @return ListNumberReservationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNumberReservationsResponse listNumberReservations(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference) throws ApiException {
        ApiResponse<ListNumberReservationsResponse> resp = listNumberReservationsWithHttpInfo(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference);
        return resp.getData();
    }

    /**
     * List multiple Number Reservations
     * Gets a paginated list of Phone Number Reservations
     * @param filterStatus Filter number reservations by status (optional)
     * @param filterCreatedAtGt Filter number reservations later than this value (optional)
     * @param filterCreatedAtLt Filter number reservations earlier than this value (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number reservations having these phone numbers (optional)
     * @param filterCustomerReference Filter number reservations via the customer reference set (optional)
     * @return ApiResponse&lt;ListNumberReservationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNumberReservationsResponse> listNumberReservationsWithHttpInfo(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference) throws ApiException {
        com.squareup.okhttp.Call call = listNumberReservationsValidateBeforeCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, null, null);
        Type localVarReturnType = new TypeToken<ListNumberReservationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List multiple Number Reservations (asynchronously)
     * Gets a paginated list of Phone Number Reservations
     * @param filterStatus Filter number reservations by status (optional)
     * @param filterCreatedAtGt Filter number reservations later than this value (optional)
     * @param filterCreatedAtLt Filter number reservations earlier than this value (optional)
     * @param filterPhoneNumbersPhoneNumber Filter number reservations having these phone numbers (optional)
     * @param filterCustomerReference Filter number reservations via the customer reference set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNumberReservationsAsync(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference, final ApiCallback<ListNumberReservationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNumberReservationsValidateBeforeCall(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNumberReservationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveNumberReservation
     * @param numberReservationId The number reservation id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveNumberReservationCall(String numberReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/number_reservations/{number_reservation_id}"
            .replaceAll("\\{" + "number_reservation_id" + "\\}", apiClient.escapeString(numberReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveNumberReservationValidateBeforeCall(String numberReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'numberReservationId' is set
        if (numberReservationId == null) {
            throw new ApiException("Missing the required parameter 'numberReservationId' when calling retrieveNumberReservation(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveNumberReservationCall(numberReservationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Single Phone Number Reservation
     * Gets a single Phone Number Reservation
     * @param numberReservationId The number reservation id (required)
     * @return RetrieveNumberReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveNumberReservationResponse retrieveNumberReservation(String numberReservationId) throws ApiException {
        ApiResponse<RetrieveNumberReservationResponse> resp = retrieveNumberReservationWithHttpInfo(numberReservationId);
        return resp.getData();
    }

    /**
     * Get a Single Phone Number Reservation
     * Gets a single Phone Number Reservation
     * @param numberReservationId The number reservation id (required)
     * @return ApiResponse&lt;RetrieveNumberReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveNumberReservationResponse> retrieveNumberReservationWithHttpInfo(String numberReservationId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveNumberReservationValidateBeforeCall(numberReservationId, null, null);
        Type localVarReturnType = new TypeToken<RetrieveNumberReservationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Single Phone Number Reservation (asynchronously)
     * Gets a single Phone Number Reservation
     * @param numberReservationId The number reservation id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveNumberReservationAsync(String numberReservationId, final ApiCallback<RetrieveNumberReservationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveNumberReservationValidateBeforeCall(numberReservationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveNumberReservationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
