/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateNumberOrderDocumentResponse;
import io.swagger.client.model.Errors;
import io.swagger.client.model.ListNumberOrderDocumentsResponse;
import io.swagger.client.model.NumberOrderDocument;
import io.swagger.client.model.RetrieveNumberOrderDocumentResponse;
import io.swagger.client.model.UpdateNumberOrderDocumentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberOrderDocumentsApi {
    private ApiClient apiClient;

    public NumberOrderDocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberOrderDocumentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNumberOrderDocument
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNumberOrderDocumentCall(NumberOrderDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/number_order_documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNumberOrderDocumentValidateBeforeCall(NumberOrderDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNumberOrderDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = createNumberOrderDocumentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload Number Order Document
     * Upload a Phone Number Order Document
     * @param body  (required)
     * @return CreateNumberOrderDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNumberOrderDocumentResponse createNumberOrderDocument(NumberOrderDocument body) throws ApiException {
        ApiResponse<CreateNumberOrderDocumentResponse> resp = createNumberOrderDocumentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Upload Number Order Document
     * Upload a Phone Number Order Document
     * @param body  (required)
     * @return ApiResponse&lt;CreateNumberOrderDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNumberOrderDocumentResponse> createNumberOrderDocumentWithHttpInfo(NumberOrderDocument body) throws ApiException {
        com.squareup.okhttp.Call call = createNumberOrderDocumentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateNumberOrderDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Number Order Document (asynchronously)
     * Upload a Phone Number Order Document
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNumberOrderDocumentAsync(NumberOrderDocument body, final ApiCallback<CreateNumberOrderDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNumberOrderDocumentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNumberOrderDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNumberOrderDocuments
     * @param filterRequirementId Filter number order documents by requirement_id (optional)
     * @param filterCreatedAtGt Filter number order documents after this datetime (optional)
     * @param filterCreatedAtLt Filter number order documents from before this datetime (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNumberOrderDocumentsCall(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/number_order_documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterRequirementId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[requirement_id]", filterRequirementId));
        if (filterCreatedAtGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[created_at][gt]", filterCreatedAtGt));
        if (filterCreatedAtLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[created_at][lt]", filterCreatedAtLt));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNumberOrderDocumentsValidateBeforeCall(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNumberOrderDocumentsCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Uploaded Number Order Documents
     * Gets a paginated list of Number Order Documents
     * @param filterRequirementId Filter number order documents by requirement_id (optional)
     * @param filterCreatedAtGt Filter number order documents after this datetime (optional)
     * @param filterCreatedAtLt Filter number order documents from before this datetime (optional)
     * @return ListNumberOrderDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNumberOrderDocumentsResponse listNumberOrderDocuments(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt) throws ApiException {
        ApiResponse<ListNumberOrderDocumentsResponse> resp = listNumberOrderDocumentsWithHttpInfo(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt);
        return resp.getData();
    }

    /**
     * Get Uploaded Number Order Documents
     * Gets a paginated list of Number Order Documents
     * @param filterRequirementId Filter number order documents by requirement_id (optional)
     * @param filterCreatedAtGt Filter number order documents after this datetime (optional)
     * @param filterCreatedAtLt Filter number order documents from before this datetime (optional)
     * @return ApiResponse&lt;ListNumberOrderDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNumberOrderDocumentsResponse> listNumberOrderDocumentsWithHttpInfo(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt) throws ApiException {
        com.squareup.okhttp.Call call = listNumberOrderDocumentsValidateBeforeCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, null, null);
        Type localVarReturnType = new TypeToken<ListNumberOrderDocumentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Uploaded Number Order Documents (asynchronously)
     * Gets a paginated list of Number Order Documents
     * @param filterRequirementId Filter number order documents by requirement_id (optional)
     * @param filterCreatedAtGt Filter number order documents after this datetime (optional)
     * @param filterCreatedAtLt Filter number order documents from before this datetime (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNumberOrderDocumentsAsync(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt, final ApiCallback<ListNumberOrderDocumentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNumberOrderDocumentsValidateBeforeCall(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNumberOrderDocumentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveNumberOrderDocument
     * @param numberOrderDocumentId The number order document id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveNumberOrderDocumentCall(String numberOrderDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/number_order_documents/{number_order_document_id}"
            .replaceAll("\\{" + "number_order_document_id" + "\\}", apiClient.escapeString(numberOrderDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveNumberOrderDocumentValidateBeforeCall(String numberOrderDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'numberOrderDocumentId' is set
        if (numberOrderDocumentId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderDocumentId' when calling retrieveNumberOrderDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveNumberOrderDocumentCall(numberOrderDocumentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Single Number Order Document
     * Gets a single Number Order Document
     * @param numberOrderDocumentId The number order document id (required)
     * @return RetrieveNumberOrderDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveNumberOrderDocumentResponse retrieveNumberOrderDocument(String numberOrderDocumentId) throws ApiException {
        ApiResponse<RetrieveNumberOrderDocumentResponse> resp = retrieveNumberOrderDocumentWithHttpInfo(numberOrderDocumentId);
        return resp.getData();
    }

    /**
     * Get a Single Number Order Document
     * Gets a single Number Order Document
     * @param numberOrderDocumentId The number order document id (required)
     * @return ApiResponse&lt;RetrieveNumberOrderDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveNumberOrderDocumentResponse> retrieveNumberOrderDocumentWithHttpInfo(String numberOrderDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveNumberOrderDocumentValidateBeforeCall(numberOrderDocumentId, null, null);
        Type localVarReturnType = new TypeToken<RetrieveNumberOrderDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Single Number Order Document (asynchronously)
     * Gets a single Number Order Document
     * @param numberOrderDocumentId The number order document id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveNumberOrderDocumentAsync(String numberOrderDocumentId, final ApiCallback<RetrieveNumberOrderDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveNumberOrderDocumentValidateBeforeCall(numberOrderDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveNumberOrderDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNumberOrderDocument
     * @param body  (required)
     * @param numberOrderDocumentId The number order document id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNumberOrderDocumentCall(NumberOrderDocument body, String numberOrderDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/number_order_documents/{number_order_document_id}"
            .replaceAll("\\{" + "number_order_document_id" + "\\}", apiClient.escapeString(numberOrderDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNumberOrderDocumentValidateBeforeCall(NumberOrderDocument body, String numberOrderDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNumberOrderDocument(Async)");
        }
        // verify the required parameter 'numberOrderDocumentId' is set
        if (numberOrderDocumentId == null) {
            throw new ApiException("Missing the required parameter 'numberOrderDocumentId' when calling updateNumberOrderDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNumberOrderDocumentCall(body, numberOrderDocumentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Number Order Document
     * Updates a Number Order Document
     * @param body  (required)
     * @param numberOrderDocumentId The number order document id (required)
     * @return UpdateNumberOrderDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateNumberOrderDocumentResponse updateNumberOrderDocument(NumberOrderDocument body, String numberOrderDocumentId) throws ApiException {
        ApiResponse<UpdateNumberOrderDocumentResponse> resp = updateNumberOrderDocumentWithHttpInfo(body, numberOrderDocumentId);
        return resp.getData();
    }

    /**
     * Update Number Order Document
     * Updates a Number Order Document
     * @param body  (required)
     * @param numberOrderDocumentId The number order document id (required)
     * @return ApiResponse&lt;UpdateNumberOrderDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateNumberOrderDocumentResponse> updateNumberOrderDocumentWithHttpInfo(NumberOrderDocument body, String numberOrderDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = updateNumberOrderDocumentValidateBeforeCall(body, numberOrderDocumentId, null, null);
        Type localVarReturnType = new TypeToken<UpdateNumberOrderDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Number Order Document (asynchronously)
     * Updates a Number Order Document
     * @param body  (required)
     * @param numberOrderDocumentId The number order document id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNumberOrderDocumentAsync(NumberOrderDocument body, String numberOrderDocumentId, final ApiCallback<UpdateNumberOrderDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNumberOrderDocumentValidateBeforeCall(body, numberOrderDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateNumberOrderDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
