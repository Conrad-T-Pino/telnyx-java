/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * NewLongCodeMessage
 */


public class NewLongCodeMessage {
  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("media_urls")
  private List<String> mediaUrls = null;

  @SerializedName("webhook_url")
  private String webhookUrl = null;

  @SerializedName("webhook_failover_url")
  private String webhookFailoverUrl = null;

  @SerializedName("use_profile_webhooks")
  private Boolean useProfileWebhooks = true;

  public NewLongCodeMessage from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Phone number, in +E.164 format, used to send the message.
   * @return from
  **/
  @Schema(required = true, description = "Phone number, in +E.164 format, used to send the message.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public NewLongCodeMessage to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Receiving address (+E.164 formatted phone number or short code).
   * @return to
  **/
  @Schema(required = true, description = "Receiving address (+E.164 formatted phone number or short code).")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public NewLongCodeMessage text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Message body (i.e., content) as a non-empty string.  **Required for SMS**
   * @return text
  **/
  @Schema(description = "Message body (i.e., content) as a non-empty string.  **Required for SMS**")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public NewLongCodeMessage subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Subject of multimedia message
   * @return subject
  **/
  @Schema(description = "Subject of multimedia message")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public NewLongCodeMessage mediaUrls(List<String> mediaUrls) {
    this.mediaUrls = mediaUrls;
    return this;
  }

  public NewLongCodeMessage addMediaUrlsItem(String mediaUrlsItem) {
    if (this.mediaUrls == null) {
      this.mediaUrls = new ArrayList<>();
    }
    this.mediaUrls.add(mediaUrlsItem);
    return this;
  }

   /**
   * A list of media URLs. The total media size must be less than 1 MB.  **Required for MMS**
   * @return mediaUrls
  **/
  @Schema(description = "A list of media URLs. The total media size must be less than 1 MB.  **Required for MMS**")
  public List<String> getMediaUrls() {
    return mediaUrls;
  }

  public void setMediaUrls(List<String> mediaUrls) {
    this.mediaUrls = mediaUrls;
  }

  public NewLongCodeMessage webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The URL where webhooks related to this message will be sent.
   * @return webhookUrl
  **/
  @Schema(description = "The URL where webhooks related to this message will be sent.")
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }

  public NewLongCodeMessage webhookFailoverUrl(String webhookFailoverUrl) {
    this.webhookFailoverUrl = webhookFailoverUrl;
    return this;
  }

   /**
   * The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.
   * @return webhookFailoverUrl
  **/
  @Schema(description = "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.")
  public String getWebhookFailoverUrl() {
    return webhookFailoverUrl;
  }

  public void setWebhookFailoverUrl(String webhookFailoverUrl) {
    this.webhookFailoverUrl = webhookFailoverUrl;
  }

  public NewLongCodeMessage useProfileWebhooks(Boolean useProfileWebhooks) {
    this.useProfileWebhooks = useProfileWebhooks;
    return this;
  }

   /**
   * If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.
   * @return useProfileWebhooks
  **/
  @Schema(description = "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.")
  public Boolean isUseProfileWebhooks() {
    return useProfileWebhooks;
  }

  public void setUseProfileWebhooks(Boolean useProfileWebhooks) {
    this.useProfileWebhooks = useProfileWebhooks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewLongCodeMessage newLongCodeMessage = (NewLongCodeMessage) o;
    return Objects.equals(this.from, newLongCodeMessage.from) &&
        Objects.equals(this.to, newLongCodeMessage.to) &&
        Objects.equals(this.text, newLongCodeMessage.text) &&
        Objects.equals(this.subject, newLongCodeMessage.subject) &&
        Objects.equals(this.mediaUrls, newLongCodeMessage.mediaUrls) &&
        Objects.equals(this.webhookUrl, newLongCodeMessage.webhookUrl) &&
        Objects.equals(this.webhookFailoverUrl, newLongCodeMessage.webhookFailoverUrl) &&
        Objects.equals(this.useProfileWebhooks, newLongCodeMessage.useProfileWebhooks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, text, subject, mediaUrls, webhookUrl, webhookFailoverUrl, useProfileWebhooks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewLongCodeMessage {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    mediaUrls: ").append(toIndentedString(mediaUrls)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    webhookFailoverUrl: ").append(toIndentedString(webhookFailoverUrl)).append("\n");
    sb.append("    useProfileWebhooks: ").append(toIndentedString(useProfileWebhooks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
